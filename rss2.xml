<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title><![CDATA[雲之彼岸]]></title>
    <link>http://fyun.li/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    <description></description>
    <pubDate>Fri, 01 Apr 2016 13:47:54 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title><![CDATA[Spring Boot (一): 快速构建 WebMvc 应用]]></title>
      <link>http://fyun.li/2016/04/01/spring-boot-mvc/</link>
      <guid>http://fyun.li/2016/04/01/spring-boot-mvc/</guid>
      <pubDate>Thu, 31 Mar 2016 16:00:00 GMT</pubDate>
      <description>
      <![CDATA[<h1 id="1-_引言">1. 引言</h1><p>作为多年的 Java 成猿，在 Spring 扫荡 Java 界的时代，不可避免的被长长的 …ApplicationContext.xml 刷屏。更可悲的是不管被刷过多少屏，被虐过多少次，依然没法记住那长长的配置项。</p>
<p>终于，在配置深坑苦苦煎熬之后，有人垂下了一根绳索，带来了 Spring Boot。</p>
<p>Spring Boot充分利用了 JavaConfig 配置模式以及“约定优于配置”的理念，能够极大的简化基于 Spring 的应用开发。为了简化依赖图，Boot 的功能是模块化的，通过导入 Boot 所谓的“starter” 模块，可以将许多的依赖添加到工程之中。</p>
<p>下面，我们就使用 IDEA 和 Gradle 构建一个最简单的 SpringMVC 应用。</p>]]>
      
      </description>
      <content:encoded><![CDATA[<h1 id="1-_引言">1. 引言</h1><p>作为多年的 Java 成猿，在 Spring 扫荡 Java 界的时代，不可避免的被长长的 …ApplicationContext.xml 刷屏。更可悲的是不管被刷过多少屏，被虐过多少次，依然没法记住那长长的配置项。</p>
<p>终于，在配置深坑苦苦煎熬之后，有人垂下了一根绳索，带来了 Spring Boot。</p>
<p>Spring Boot充分利用了 JavaConfig 配置模式以及“约定优于配置”的理念，能够极大的简化基于 Spring 的应用开发。为了简化依赖图，Boot 的功能是模块化的，通过导入 Boot 所谓的“starter” 模块，可以将许多的依赖添加到工程之中。</p>
<p>下面，我们就使用 IDEA 和 Gradle 构建一个最简单的 SpringMVC 应用。</p>
<a id="more"></a>
<h1 id="2-_Hello_MVC">2. Hello MVC</h1><h2 id="2-1-_创建一个基于_Gradle_的_Java_Web_应用">2.1. 创建一个基于 Gradle 的 Java Web 应用</h2><p><img src="http://ww1.sinaimg.cn/large/620f1e7egw1f2hhq1lirxj20wi0l7jtr.jpg" alt="idea gradle web"></p>
<p>创建之后，代码结构如下：</p>
<p><img src="http://ww1.sinaimg.cn/large/620f1e7egw1f2hhr3u0qhj209v08eaak.jpg" alt="structure"></p>
<h2 id="2-2-_添加_Spring_Boot_Web_依赖">2.2. 添加 Spring Boot Web 依赖</h2><p>build.gradle 内容如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">group <span class="string">'li.fyun'</span></span><br><span class="line">version <span class="string">'1.0-SNAPSHOT'</span></span><br><span class="line"></span><br><span class="line">apply plugin: <span class="string">'java'</span></span><br><span class="line">apply plugin: <span class="string">'war'</span></span><br><span class="line">apply plugin: <span class="string">'idea'</span></span><br><span class="line">apply plugin: <span class="string">'spring-boot'</span></span><br><span class="line"></span><br><span class="line">sourceCompatibility = <span class="number">1.8</span></span><br><span class="line">targetCompatibility = <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath(<span class="string">"org.springframework.boot:spring-boot-gradle-plugin:1.3.3.RELEASE"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jar &#123;</span><br><span class="line">    baseName = <span class="string">'springboot'</span></span><br><span class="line">    version = <span class="string">'0.1.0'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile(<span class="string">"org.springframework.boot:spring-boot-starter-web"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-3-_打个招呼吧">2.3. 打个招呼吧</h2><p>Application.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> li.fyunli.springboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.builder.SpringApplicationBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.web.SpringBootServletInitializer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by fyunli on 16/4/1.</span><br><span class="line"> */</span></span><br><span class="line"><span class="annotation">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class="line">        application.listeners();</span><br><span class="line">        <span class="keyword">return</span> application.sources(applicationClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Class&lt;Application&gt; applicationClass = Application.class;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>HelloController.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> li.fyunli.springboot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by fyunli on 16/4/1.</span><br><span class="line"> */</span></span><br><span class="line"><span class="annotation">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="annotation">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello Boot!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-4-_展示成果">2.4. 展示成果</h2><p>运行 Application.java, 控制台很友好地告知这是基于 Spring Boot 的应用：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  '  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"> :: Spring Boot ::        (v1.3.3.RELEASE)</span><br><span class="line"></span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<p>浏览器访问 <a href="http://localhost:8080/hello" target="_blank" rel="external">http://localhost:8080/hello</a>, 显示：</p>
<p><img src="http://ww1.sinaimg.cn/large/620f1e7egw1f2hiadzuchj20gc0a53yp.jpg" alt="hello boot"></p>
<p>OK， 第一个 Spring Boot MVC 程序完成。</p>
<p>源代码可以在 <a href="https://github.com/fyunli/spring-boot-samples/tree/master/spring-boot-mvc" target="_blank" rel="external">github</a> 找到。</p>
<h1 id="3-_修改配置">3. 修改配置</h1><p>Spring Boot 可以方便地通过 application.properties 或者 application.yml 调整默认的配置。</p>
<p>如需要修改应用发布端口和目录，在 src/main/resources 中创建 application.properties, 内容如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server.port=<span class="number">8081</span></span><br><span class="line">server.contextPath=/springboot</span><br></pre></td></tr></table></figure>
<p>启动后访问 <a href="http://localhost:8081/springboot/hello" target="_blank" rel="external">http://localhost:8081/springboot/hello</a> 看看效果吧。</p>
]]></content:encoded>
      <comments>http://fyun.li/2016/04/01/spring-boot-mvc/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[ngrok使用]]></title>
      <link>http://fyun.li/2016/03/31/ngrok/</link>
      <guid>http://fyun.li/2016/03/31/ngrok/</guid>
      <pubDate>Wed, 30 Mar 2016 16:00:00 GMT</pubDate>
      <description>
      <![CDATA[<p>偶尔有需要将本机 WEB 项目展示给异地的朋友，虽然次数不多，但是一旦有这种需求就很抓狂。为了临时性的需求，专门鼓捣一遍部署到 VPS 上实在有些牛刀杀鸡的感觉，特别是 VPS 上刚好没有相关运行环境的时候简直打人的心都有了。</p>
<p>很多年以前，曾经用过花生壳动态域]]>
      </description>
      <content:encoded><![CDATA[<p>偶尔有需要将本机 WEB 项目展示给异地的朋友，虽然次数不多，但是一旦有这种需求就很抓狂。为了临时性的需求，专门鼓捣一遍部署到 VPS 上实在有些牛刀杀鸡的感觉，特别是 VPS 上刚好没有相关运行环境的时候简直打人的心都有了。</p>
<p>很多年以前，曾经用过花生壳动态域名来做映射，自从背弃了 WINDOWS 阵营之后，就再也没用过了。</p>
<p>幸好，有 <a href="https://github.com/inconshreveable/ngrok" target="_blank" rel="external">ngrok</a>。这里有一篇 <a href="http://www.imike.me/2016/03/23/CentOS%E4%B8%8B%E9%83%A8%E7%BD%B2Ngrok%E6%9C%8D%E5%8A%A1%E5%99%A8/" target="_blank" rel="external">ngrok部署教程</a></p>
<p>但是，作为一个更为纯粹的懒人，我要告诉你一个更省事的法子，那就是使用 <a href="http://natapp.cn/" target="_blank" rel="external">natapp.cn</a> 服务。</p>
<ol>
<li>上 <a href="http://natapp.cn/" target="_blank" rel="external">natapp.cn</a> 下载客户端；</li>
<li>解压后运行 ngrok -config ngrok.cfg -subdomain myapp 80 (myapp是你webapp别名，80是本机映射端口);</li>
<li>打开 <a href="http://myapp.ngrok.natapp.cn" target="_blank" rel="external">http://myapp.ngrok.natapp.cn</a> 访问吧</li>
</ol>
<p>// ~OVER</p>
]]></content:encoded>
      <comments>http://fyun.li/2016/03/31/ngrok/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[Spring Session + Redis 实现分布式会话]]></title>
      <link>http://fyun.li/2016/02/14/spring-session-redis/</link>
      <guid>http://fyun.li/2016/02/14/spring-session-redis/</guid>
      <pubDate>Sat, 13 Feb 2016 16:00:00 GMT</pubDate>
      <description>
      
      </description>
      <content:encoded></content:encoded>
      <comments>http://fyun.li/2016/02/14/spring-session-redis/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[EventBus 使用]]></title>
      <link>http://fyun.li/2016/01/11/eventbus/</link>
      <guid>http://fyun.li/2016/01/11/eventbus/</guid>
      <pubDate>Sun, 10 Jan 2016 16:00:00 GMT</pubDate>
      <description>
      <![CDATA[<p><a href="https://github.com/greenrobot/EventBus">EventBus</a> 是一款针对 Android 端优化的 publish/subscribe 消息总线。</p>
<p><img src="http://ww3.sinaimg.cn/large/620f1e7egw1ezvd8hhf99j20zk0dbabt.jpg" alt="eventbus arch"></p>
<p>主要目的是替代Intent, Handler,BroadCast 在 Fragment，Activity，Service，线程之间传递消息，优点是开销小，代码优雅。将发送者和接收者解耦。</p>]]>
      
      </description>
      <content:encoded><![CDATA[<p><a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">EventBus</a> 是一款针对 Android 端优化的 publish/subscribe 消息总线。</p>
<p><img src="http://ww3.sinaimg.cn/large/620f1e7egw1ezvd8hhf99j20zk0dbabt.jpg" alt="eventbus arch"></p>
<p>主要目的是替代Intent, Handler,BroadCast 在 Fragment，Activity，Service，线程之间传递消息，优点是开销小，代码优雅。将发送者和接收者解耦。</p>
<a id="more"></a>
<h1 id="基本用法">基本用法</h1><p>引入 eventbus:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'de.greenrobot:eventbus:2.4.0'</span></span><br></pre></td></tr></table></figure>
<p>定义事件:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageEvent</span> </span>&#123; <span class="comment">/* Additional fields if needed */</span> &#125;</span><br></pre></td></tr></table></figure>
<p>注册事件接收者：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eventBus.register(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure>
<p>发送事件:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eventBus.post(event)</span><br></pre></td></tr></table></figure>
<p>接收消息并处理:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(MessageEvent event)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>注销事件接收：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eventBus.unregister(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure>
<p>最后，proguard 需要做一些额外处理:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># EventBus</span><br><span class="line">-keepclassmembers class ** &#123;</span><br><span class="line">    public void onEvent*(**);</span><br><span class="line">    void onEvent*(**);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="基本概念">基本概念</h1><p>作为一个消息总线，有三个主要的元素：</p>
<ul>
<li>Event：事件。可以是任意类型的对象</li>
<li>Subscriber：事件订阅者，接收特定的事件。在EventBus中，使用约定来指定事件订阅者以简化使用。即所有事件订阅都都是以onEvent开头的函数，具体来说，函数的名字是onEvent，onEventMainThread，onEventBackgroundThread，onEventAsync这四个，这个和ThreadMode有关</li>
<li>Publisher：事件发布者，用于通知 Subscriber 有事件发生。可以在任意线程任意位置发送事件，直接调用 eventBus.post(Object) 方法，可以自己实例化 EventBus 对象，但一般使用默认的单例就好了：EventBus.getDefault()， 根据 post 函数参数的类型，会自动调用订阅相应类型事件的函数。</li>
</ul>
<h1 id="指定处理线程">指定处理线程</h1><p>默认情况下，onEvent 方法会在 post(Event) 的方法的线程中执行，但是可能会 post(Event) 是一个非UI线程，而 onEvent 方法需要更新UI，需要在主线程运行。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventMainThread</span><span class="params">(MessageEvent event)</span> </span>&#123;</span><br><span class="line">    textField.setText(event.message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为每个事件订阅函数都是和一个 ThreadMode 相关联的，ThreadMode 指定了会调用的函数。有以下四个 ThreadMode：</p>
<ul>
<li>PostThread：事件的处理在和事件的发送在相同的进程，所以事件处理时间不应太长，不然影响事件的发送线程，而这个线程可能是UI线程。对应的函数名是 onEvent。</li>
<li>MainThread: 事件的处理会在UI线程中执行。事件处理时间不能太长，这个不用说的，长了会ANR的，对应的函数名是onEventMainThread。</li>
<li>BackgroundThread：事件的处理会在一个后台线程中执行，对应的函数名是 onEventBackgroundThread，虽然名字是 BackgroundThread，事件处理是在后台线程，但事件处理时间还是不应该太长，因为如果发送事件的线程是后台线程，会直接执行事件，如果当前线程是 UI 线程，事件会被加到一个队列中，由一个线程依次处理这些事件，如果某个事件处理时间太长，会阻塞后面的事件的派发或处理。</li>
<li>Async：事件处理会在单独的线程中执行，主要用于在后台线程中执行耗时操作，每个事件会开启一个线程（有线程池），但最好限制线程的数目。</li>
</ul>
<h1 id="使用_Sticky_Events">使用 Sticky Events</h1><p>某些时候，我们并不希望发布出来的Event立即被消费掉，而是等到时机成熟。比如说，在一个详情页点赞之后，产生一个VoteEvent，VoteEvent并不立即被消费，而是等用户退出详情页回到商品列表之后，接收到该事件，然后刷新Adapter等。其实这就是之前我们用startActivityForResult和onActivityResult做的事情。</p>
<p>那么怎么用EventBus来模拟这样的情况呢？这就需要另外一个强大的机制，Sticky Event.</p>
<p>和普通的Event不同，当发布一个Sticky Event，需要使用postSticky方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().postSticky(<span class="keyword">new</span> VoteEvent(obj));</span><br></pre></td></tr></table></figure>
<p>上面的代码发布了一个点赞的Sticky Event.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">EventBus.getDefault().registerSticky(<span class="keyword">this</span>);</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventMainThread</span><span class="params">(VoteEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// TODO update adapter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>EventBus 的 registerSticky 方法在每次执行的时候，都会去查询一次 Sticky Event，并调用响应的方法处理。</p>
<p>除了 registerSticky 方法来触发Sticky Event 之外，我们还可以通过 getStickyEvent 方法来获取响应的 Sticky Event 来进行处理。比如,我们可以在 onResume 方法里面检查 EventBus 里面是否有 VoteEvent 的Sticky Event，从而进行处理：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onResume();</span><br><span class="line">    VoteEvent voteEvent = EventBus.getDefault().getStickyEvent(VoteEvent.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="3-0_beta_版本的变化">3.0 beta 版本的变化</h1><p>3.0 版本目前还在 beta 阶段，主要变化时使用注解代替基于惯例的 onEvent 方法，用法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Subscribe</span>(threadMode = ThreadMode.MainThread)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onVoteEvent</span><span class="params">(VoteEvent event)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="进阶">进阶</h1><p>想要探索更幽深的世界，就去看源码吧：</p>
<p><a href="http://kymjs.com/code/2015/12/12/01/" target="_blank" rel="external">EventBus源码研读</a></p>
]]></content:encoded>
      <comments>http://fyun.li/2016/01/11/eventbus/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[MVVM 和 Android Data Binding 续]]></title>
      <link>http://fyun.li/2015/12/28/android-data-binding-2/</link>
      <guid>http://fyun.li/2015/12/28/android-data-binding-2/</guid>
      <pubDate>Mon, 28 Dec 2015 14:49:00 GMT</pubDate>
      <description>
      <![CDATA[<p>上一篇文章我们回顾了 MVVM 模式并了解了 Android Data Binding 的相关知识。那么这一章我们来实际做一个简单的基于 Android Data Binding 的 MVVM 架构的 app。</p>
<h1 id="创建一个_Android_项目">创建一个 Android 项目</h1><p>我们先用 Android Studio 创建一个带有 Empty Activity 的项目：</p>
<p><img src="http://ww1.sinaimg.cn/large/620f1e7egw1ezfrgg2x75j20x40nn41v.jpg" alt="new android project"></p>]]>
      
      </description>
      <content:encoded><![CDATA[<p>上一篇文章我们回顾了 MVVM 模式并了解了 Android Data Binding 的相关知识。那么这一章我们来实际做一个简单的基于 Android Data Binding 的 MVVM 架构的 app。</p>
<h1 id="创建一个_Android_项目">创建一个 Android 项目</h1><p>我们先用 Android Studio 创建一个带有 Empty Activity 的项目：</p>
<p><img src="http://ww1.sinaimg.cn/large/620f1e7egw1ezfrgg2x75j20x40nn41v.jpg" alt="new android project"></p>
<a id="more"></a>
<p><img src="http://ww4.sinaimg.cn/large/620f1e7egw1ezfrhbu45vj20x40nn76a.jpg" alt="new android 2"></p>
<p>自动生成的 MainActivity 如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> li.fyun.mvvm.view;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> li.fyun.mvvm.R;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>activity_main.xml:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">RelativeLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">                <span class="attribute">xmlns:tools</span>=<span class="value">"http://schemas.android.com/tools"</span></span><br><span class="line">                <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">                <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">                <span class="attribute">android:paddingBottom</span>=<span class="value">"@dimen/activity_vertical_margin"</span></span><br><span class="line">                <span class="attribute">android:paddingLeft</span>=<span class="value">"@dimen/activity_horizontal_margin"</span></span><br><span class="line">                <span class="attribute">android:paddingRight</span>=<span class="value">"@dimen/activity_horizontal_margin"</span></span><br><span class="line">                <span class="attribute">android:paddingTop</span>=<span class="value">"@dimen/activity_vertical_margin"</span></span><br><span class="line">                <span class="attribute">tools:context</span>=<span class="value">".view.MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:text</span>=<span class="value">"Hello Word"</span></span><br><span class="line">        /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="增加对_Data_Binding_的支持">增加对 Data Binding 的支持</h1><p>在 app 的 build.gradle 中增加：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">android &#123;</span><br><span class="line">    ...</span><br><span class="line">    dataBinding &#123;</span><br><span class="line">        enabled = <span class="keyword">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="创建_Model">创建 Model</h1><p>在子 package .model 中创建 Model 类 User:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> li.fyun.mvvm.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by fyunli on 15/12/28.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> User[] users = <span class="keyword">new</span> User[]&#123;</span><br><span class="line">            <span class="keyword">new</span> User(<span class="string">"Andrea"</span>), <span class="keyword">new</span> User(<span class="string">"Betty"</span>), <span class="keyword">new</span> User(<span class="string">"Calvin"</span>), <span class="keyword">new</span> User(<span class="string">"Daisy"</span>), <span class="keyword">new</span> User(<span class="string">"Eason"</span>),</span><br><span class="line">            <span class="keyword">new</span> User(<span class="string">"Frank"</span>), <span class="keyword">new</span> User(<span class="string">"Gary"</span>), <span class="keyword">new</span> User(<span class="string">"Halen"</span>), <span class="keyword">new</span> User(<span class="string">"Iris"</span>), <span class="keyword">new</span> User(<span class="string">"Java"</span>)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String portrait = <span class="string">"http://ww3.sinaimg.cn/large/620f1e7egw1ey8bjsbmr2j20b40b475e.jpg"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPortrait</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> portrait;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPortrait</span><span class="params">(String portrait)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.portrait = portrait;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// just a sample logic</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="keyword">new</span> Random().nextInt(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">return</span> users[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="创建_ViewModel">创建 ViewModel</h1><p>然后在子 package .viewmodel 中创建 ViewModel 类 UserModel:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> li.fyun.mvvm.viewmodel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by fyunli on 15/12/28.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ViewModel</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> li.fyun.mvvm.viewmodel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.databinding.ObservableField;</span><br><span class="line"><span class="keyword">import</span> android.os.Parcel;</span><br><span class="line"><span class="keyword">import</span> android.os.Parcelable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> li.fyun.mvvm.model.User;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by fyunli on 15/12/28.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserModel</span> <span class="keyword">implements</span> <span class="title">ViewModel</span>, <span class="title">Parcelable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ObservableField&lt;String&gt; username = <span class="keyword">new</span> ObservableField&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> ObservableField&lt;String&gt; portrait = <span class="keyword">new</span> ObservableField&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserModel</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username.set(user.getUsername());</span><br><span class="line">        <span class="keyword">this</span>.portrait.set(user.getPortrait());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// just a sample logic</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserModel <span class="title">laodUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = User.getUser();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserModel(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// use android parceable generator plugin to gen the code</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">        dest.writeSerializable(<span class="keyword">this</span>.username);</span><br><span class="line">        dest.writeSerializable(<span class="keyword">this</span>.portrait);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">UserModel</span><span class="params">(Parcel in)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = (ObservableField&lt;String&gt;) in.readSerializable();</span><br><span class="line">        <span class="keyword">this</span>.portrait = (ObservableField&lt;String&gt;) in.readSerializable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Creator&lt;UserModel&gt; CREATOR = <span class="keyword">new</span> Creator&lt;UserModel&gt;() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> UserModel <span class="title">createFromParcel</span><span class="params">(Parcel source)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> UserModel(source);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> UserModel[] newArray(<span class="keyword">int</span> size) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> UserModel[size];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="绑定_View_和_ViewModel">绑定 View 和 ViewModel</h1><p>在 activity_main.xml 中声明 UserModel 变量 user, 并在 TextView 中用 @{user.username} 绑定属性：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">layout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">        <span class="attribute">xmlns:tools</span>=<span class="value">"http://schemas.android.com/tools"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">variable</span></span><br><span class="line">            <span class="attribute">name</span>=<span class="value">"user"</span></span><br><span class="line">            <span class="attribute">type</span>=<span class="value">"li.fyun.mvvm.viewmodel.UserModel"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">RelativeLayout</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:paddingBottom</span>=<span class="value">"@dimen/activity_vertical_margin"</span></span><br><span class="line">        <span class="attribute">android:paddingLeft</span>=<span class="value">"@dimen/activity_horizontal_margin"</span></span><br><span class="line">        <span class="attribute">android:paddingRight</span>=<span class="value">"@dimen/activity_horizontal_margin"</span></span><br><span class="line">        <span class="attribute">android:paddingTop</span>=<span class="value">"@dimen/activity_vertical_margin"</span></span><br><span class="line">        <span class="attribute">tools:context</span>=<span class="value">".view.MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">            <span class="attribute">android:id</span>=<span class="value">"@+id/textview_username_label"</span></span><br><span class="line">            <span class="attribute">android:layout_width</span>=<span class="value">"80dp"</span></span><br><span class="line">            <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:text</span>=<span class="value">"Username:"</span></span><br><span class="line">            /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">            <span class="attribute">android:id</span>=<span class="value">"@+id/textview_username_field"</span></span><br><span class="line">            <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:text</span>=<span class="value">"@&#123;user.username&#125;"</span></span><br><span class="line">            <span class="attribute">android:layout_toRightOf</span>=<span class="value">"@id/textview_username_label"</span></span><br><span class="line">            <span class="attribute">tools:text</span>=<span class="value">"Vincent"</span></span><br><span class="line">            /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">RelativeLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">layout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后在 MainActivity 中绑定 View 和 ViewModel：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> li.fyun.mvvm.view;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.databinding.DataBindingUtil;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> li.fyun.mvvm.R;</span><br><span class="line"><span class="keyword">import</span> li.fyun.mvvm.databinding.ActivityMainBinding;</span><br><span class="line"><span class="keyword">import</span> li.fyun.mvvm.viewmodel.UserModel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ActivityMainBinding binding;</span><br><span class="line">    UserModel userModel;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        binding = DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.activity_main);</span><br><span class="line">        userModel = UserModel.laodUser();</span><br><span class="line">        binding.setUser(userModel);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="展示一下成果">展示一下成果</h1><p>在模拟器中运行，效果如下：</p>
<p><img src="http://ww3.sinaimg.cn/large/620f1e7egw1ezfsu424xbj20er0mo3zi.jpg" alt="showtime"></p>
<h1 id="增加一点新东西">增加一点新东西</h1><p>我们希望在这个程序中能显示用户的头像。</p>
<p>首先我们在 layout 中先声明一个 ImageView 并绑定到 UserModel 的 portrait:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ImageView</span></span><br><span class="line">    <span class="attribute">android:id</span>=<span class="value">"@+id/imageview_portraint"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"64dp"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"64dp"</span></span><br><span class="line">    <span class="attribute">android:layout_marginRight</span>=<span class="value">"32dp"</span></span><br><span class="line">    <span class="attribute">app:imageUrl</span>=<span class="value">"@&#123;user.portrait&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后，我们要在 UserModel 中写一个 BindingAdapter 用于加载图像：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@BindingAdapter</span>(&#123;<span class="string">"bind:imageUrl"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadImage</span><span class="params">(ImageView view, String imageUrl)</span> </span>&#123;</span><br><span class="line">    Glide.with(view.getContext())</span><br><span class="line">            .load(imageUrl)</span><br><span class="line">            .into(view);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>别忘了在 app 的 build.gralde 中引入依赖：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'com.github.bumptech.glide:glide:3.6.1'</span></span><br></pre></td></tr></table></figure>
<p>并在 AndroidManifest.xml 中声明 INTERNET 访问权限：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">uses-permission</span> <span class="attribute">android:name</span>=<span class="value">"android.permission.INTERNET"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行程序，看一下效果：</p>
<p><img src="http://ww1.sinaimg.cn/large/620f1e7egw1ezftpbqvk1j20er0mojsi.jpg" alt="showtime 2"></p>
<h1 id="处理屏幕旋转">处理屏幕旋转</h1><p>这时候发现有什么问题吗？当你旋转屏幕的时候，显示的用户名会随机变化，这是应为 Activity Instance State 没有保存，在 MVVM 模式下，Instance State 的保存变得简单许多:</p>
<p>首先在 onSaveInstanceState 中保存：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onSaveInstanceState(outState);</span><br><span class="line">    outState.putParcelable(USER_MODEL, userModel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在 onRestoreInstanceState(Bundle savedInstanceState) 或者 onCreate(Bundle savedInstanceState) 方法中取回保存的数据即可：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    binding = DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.activity_main);</span><br><span class="line">    <span class="keyword">if</span>(savedInstanceState == <span class="keyword">null</span>) &#123;</span><br><span class="line">        userModel = UserModel.laodUser();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        userModel = savedInstanceState.getParcelable(USER_MODEL);</span><br><span class="line">    &#125;</span><br><span class="line">    binding.setUser(userModel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="打完，收工！">打完，收工！</h1><p>源代码在 <a href="https://github.com/fyunli/android-mvvm-sample" target="_blank" rel="external">Github</a> 可找到。</p>
]]></content:encoded>
      <comments>http://fyun.li/2015/12/28/android-data-binding-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[MVVM 与 Android Data Binding]]></title>
      <link>http://fyun.li/2015/12/26/android-data-binding/</link>
      <guid>http://fyun.li/2015/12/26/android-data-binding/</guid>
      <pubDate>Sat, 26 Dec 2015 12:02:00 GMT</pubDate>
      <description>
      <![CDATA[<p>在 Android 开发过程中，由于 Android 作为 View 描述的 xml 视图功能较弱，开发中很容易写出臃肿繁杂的 Activity/Fragment，甚至有写出过数千行代码的 Activity。大量的显示、校验、事件响应、回调接口充斥在 Activity 中。Activity/Fragment 实际上成了 View 和 Controller 的混合体，既要承担 View 的显示功能，又要承担 Controller 的控制功能。承担的功能过多，膨胀成繁芜的巨类也就不足为怪了。</p>
<h1 id="UI_界面设计模式">UI 界面设计模式</h1><p>在传统的 UI 设计模式中，MVC 已经实践中证明了其价值，并在漫长的使用过程中（（MVC最早出现于 1970 年代）演化出 MVP 和 MVVM 多个变种。</p>]]>
      
      </description>
      <content:encoded><![CDATA[<p>在 Android 开发过程中，由于 Android 作为 View 描述的 xml 视图功能较弱，开发中很容易写出臃肿繁杂的 Activity/Fragment，甚至有写出过数千行代码的 Activity。大量的显示、校验、事件响应、回调接口充斥在 Activity 中。Activity/Fragment 实际上成了 View 和 Controller 的混合体，既要承担 View 的显示功能，又要承担 Controller 的控制功能。承担的功能过多，膨胀成繁芜的巨类也就不足为怪了。</p>
<h1 id="UI_界面设计模式">UI 界面设计模式</h1><p>在传统的 UI 设计模式中，MVC 已经实践中证明了其价值，并在漫长的使用过程中（（MVC最早出现于 1970 年代）演化出 MVP 和 MVVM 多个变种。</p>
<a id="more"></a>
<h2 id="MVC">MVC</h2><p>MVC 我们都知道是 Model-View-Controller，为了使得程序的各个部分分离降低耦合性，MVC 除了把应用程序分成 View、Model 层，还额外的加了一个 Controller 层，它的职责为进行 Model 和 View 之间的协作（路由、输入预处理等）的应用逻辑；Model 进行处理业务逻辑。</p>
<p><img src="http://ww4.sinaimg.cn/large/620f1e7egw1ezf5hz0emcj20ao04kt8t.jpg" alt="MVC Pattern"></p>
<p>MVC 通常的处理时序如下：</p>
<ol>
<li>View 接受用户的交互请求；</li>
<li>View 将请求转交给 Controller；</li>
<li>Controller 操作 Model 进行数据更新；</li>
<li>数据更新之后，Model 通知 View 数据变化；</li>
<li>View 显示更新之后的数据。</li>
</ol>
<p>通常 Model 使用 Observer 模式通知 View 数据变化：</p>
<p><img src="http://ww4.sinaimg.cn/large/620f1e7ejw1ezf6uoj1wwj20ao04kaa6.jpg" alt="MVC with Observer"></p>
<p>MVC 的优点：</p>
<ul>
<li>把业务逻辑和展示逻辑分离，模块化程度高。且当应用逻辑需要变更的时候，不需要变更业务逻辑和展示逻辑，只需要Controller换成另外一个Controller就行了（Swappable Controller）。</li>
<li>观察者模式可以做到多视图同时更新。</li>
</ul>
<p>MVD 的缺点：</p>
<ul>
<li>Controller 测试困难。因为视图同步操作是由 View 自己执行，而 View 只能在 UI 环境下运行。在没有 UI 环境下对 Controller 进行单元测试的时候，应用逻辑正确性是无法验证的：Model 更新的时候，无法对 View 的更新操作进行断言。</li>
<li>View 无法组件化。View 是强依赖特定的 Model 的，如果需要把这个 View 抽出来作为一个另外一个应用程序可复用的组件就困难了。因为不同程序的的 Model 是不一样的。</li>
<li>当有变化的时候需要同时维护 Model, View, Controller 及其交互，这显然让事情复杂化了。</li>
</ul>
<h2 id="MVP">MVP</h2><p>为了解决 MVC 的权限，MVP 对 MVC 进行了改良，MVP 模式把 MVC 模式中的 Controller 换成了 Presenter：</p>
<p><img src="http://ww2.sinaimg.cn/large/620f1e7egw1ezf77ncrhuj20ao05tmx8.jpg" alt="MVP Pattern"></p>
<p>MVP 通常的调用时序如下：</p>
<ol>
<li>View 接受用户的交互请求；</li>
<li>View 将请求转交给 Presenter；</li>
<li>Presenter 操作 Model 进行业务处理；</li>
<li>Model 通知 Presenter 数据发生变化；</li>
<li>Presenter 更新 View 的数据。</li>
</ol>
<p>和 MVC 不同的是，Presenter 会反作用于 View，不像 Controller 只能被动的接受 View 的指挥。</p>
<p>通常我们会抽象 View 接口，暴露属性和事件，然后 Presenter 引用 View 接口。这样可以很容易的构造 View 的 Mock 对象，提高可单元测试性。在这里，Presenter 的责任变大了，不仅要操作数据，而且要更新 View。</p>
<p>上面讲的是 MVP 的 Passive View 模式，该模式下 View 非常 Passive，它几乎什么都不知道，Presenter 让它干什么它就干什么。</p>
<p>在实际的实现中，有人会倾向于 奖 Presenter 一部分简单的同步逻辑交给 View 自己去做，Presenter 只负责比较复杂的、高层次的 UI 操作，所以可以把它看成一个 Supervising Controller，这种模式也被称为 The Supervising Controller MVP：</p>
<p><img src="http://ww4.sinaimg.cn/large/620f1e7ejw1ezf7lvm7nsj20ao05q3yo.jpg" alt="The Supervising Controller MVP"></p>
<p>MVP 的优点：</p>
<ul>
<li>便于测试。Presenter 对 View 是通过接口进行，在对 Presenter 进行不依赖 UI 环境的单元测试的时候。可以通过 Mock 一个 View 对象，这个对象只需要实现了 View 的接口即可。</li>
<li>View 可以进行组件化。在 MVP 当中，View 不依赖 Model。这样就可以让 View 从特定的业务场景中脱离出来，可以说 View 可以做到对业务完全无知。它只需要提供一系列接口提供给上层操作。这样就可以做到高度可复用的 View组件。</li>
</ul>
<p>MVP 缺点：</p>
<ul>
<li>Presenter 中除了应用逻辑以外，还有大量的 View-&gt;Model，Model-&gt;View 的手动同步逻辑，造成 Presenter 比较笨重，维护起来会比较困难。</li>
</ul>
<h2 id="MVVM">MVVM</h2><p>MVVM 可以看作是一种特殊的 MVP（Passive View）模式，或者说是对 MVP 模式的进一步改良。</p>
<p>MVVM 模式最早是微软公司提出，并且了大量使用在.NET的WPF和Sliverlight中。2005年微软工程师John Gossman在自己的博客上首次公布了MVVM模式。</p>
<p><img src="http://ww3.sinaimg.cn/large/620f1e7ejw1ezf7yaf6gej20ao05t0su.jpg" alt="MVVM Pattern"></p>
<p>MVVM 代表的是 Model-View-ViewModel。MVVM 模式将 Presenter 改名为 ViewModel，基本上与 MVP 模式完全一致，唯一区别在于 ViewModel 将密切关联的 Model 和 View 的逻辑单独提取出来，用数据绑定将他们关联到一起。Model 的改变会通过 ViewModel 来映射到 View 上，反之亦然。数据绑定你可以认为是 Observer 模式或者是 Publish/Subscribe 模式，原理都是为了用一种统一的集中的方式实现频繁需要被实现的数据更新问题。</p>
<p>比起MVP，MVVM 不仅简化了业务与界面的依赖关系，还优化了数据频繁更新的解决方案，甚至可以说提供了一种有效的解决模式。</p>
<p>MVVM 优点：</p>
<ul>
<li>省去了model变化之后手动修改view和view变化之后手动修改model的繁琐工作；</li>
<li>UI和功能更加松耦合了，功能的可测试性就越来越强。</li>
</ul>
<p>MVVM 缺点：</p>
<ul>
<li>在复杂的情况下，很难预先设计好足够通用的 ViewModel；</li>
<li>通常会依赖于特定的数据绑定框架；</li>
</ul>
<h1 id="Android_Data_Binding">Android Data Binding</h1><p>2015 Google IO 大会带来的 Data Binding 库使得 Android 开发者可以方便的实现 MVVM 架构模式。</p>
<blockquote>
<p>警告：Data Binding 库目前还是 Beta 版本，采用需谨慎。</p>
</blockquote>
<p>以下大部分内容摘录自<a href="http://segmentfault.com/a/1190000002876984" target="_blank" rel="external">Data Binding（数据绑定）用户指南</a>，根据 <a href="https://developer.android.com/intl/zh-cn/tools/data-binding/guide.html#data_binding_layout_files" target="_blank" rel="external">Android 官方英文指南</a> 做了一些更新。</p>
<h2 id="配置环境">配置环境</h2><p>最新版的 Android Studio 已经内置了对 Android Data Binding 框架的支持，配置起来也很简单，只需要在 app 的 build.gradle 文件中添加下面的内容就好了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    ....</span><br><span class="line">    dataBinding &#123;</span><br><span class="line">        enabled = <span class="keyword">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Data_Binding_Layout_文件">Data Binding Layout 文件</h2><h3 id="Data_Binding_表达式">Data Binding 表达式</h3><p>Data Binding layout 文件有点不同的是：起始根标签是 layout，接下来一个 data 元素以及一个 view 的根元素。这个 view 元素就是你没有使用 Data Binding的layout文件的根元素。举例说明如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">layout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">data</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="title">variable</span> <span class="attribute">name</span>=<span class="value">"user"</span> <span class="attribute">type</span>=<span class="value">"com.example.User"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="title">data</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">LinearLayout</span></span><br><span class="line">       <span class="attribute">android:orientation</span>=<span class="value">"vertical"</span></span><br><span class="line">       <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">       <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="title">TextView</span> <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">           <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">           <span class="attribute">android:text</span>=<span class="value">"@&#123;user.firstName&#125;"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="title">TextView</span> <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">           <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">           <span class="attribute">android:text</span>=<span class="value">"@&#123;user.lastName&#125;"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">layout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在data内描述了一个名为user的变量属性，使其可以在这个layout中使用：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">variable</span> <span class="attribute">name</span>=<span class="value">"user"</span> <span class="attribute">type</span>=<span class="value">"com.example.User"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>在layout的属性表达式写作 @{}，下面是一个 TextView 的 text 设置为 user 的 firstName 属性：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">TextView</span> <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">          <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">          <span class="attribute">android:text</span>=<span class="value">"@&#123;user.firstName&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Data_Object">Data Object</h3><p>假设你有一个user的plain-old Java Object（POJO）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> String firstName;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> String lastName;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String firstName, String lastName)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">       <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个类型的对象拥有从不改变的数据。在 app 中它是常见的，可以读取一次并且之后从不改变。当然也可以使用 JavaBeans 对象：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> String firstName;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> String lastName;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String firstName, String lastName)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">       <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.firstName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.lastName;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从 Data Binding 的角度来看，这两个类是等价的。用于 TextView 中的 android:text 属性的表达式 @{user.firstName} 将访问前者 POJO 对象中的 firstName 和后者 JavaBeans 对象中的 getFirstName() 方法。</p>
<h3 id="绑定数据">绑定数据</h3><p>默认情况下，一个 Binding 类会基于 layout 文件的名称而产生，将其转换为 Pascal case（译注：首字母大写的命名规范）并且添加 “Binding” 后缀。上述的 layout 文件是 activity_main.xml，因此生成的类名是 ActivityMainBinding。此类包含从 layout 属性到 layout 的 Views 中所有的 bindings（例如user变量），并且它还知道如何给 Binding 表达式分配数值。创建 bindings 的最简单的方式是在 inflating（译注：layout文件与Activity/Fragment的“链接”）期间如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">   ActivityMainBinding binding = DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.main_activity);</span><br><span class="line">   User user = <span class="keyword">new</span> User(<span class="string">"Test"</span>, <span class="string">"User"</span>);</span><br><span class="line">   binding.setUser(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>就是这样，运行 app 后，你将会看到 Test User。或者你可以通过如下获取 View：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MainActivityBinding binding = MainActivityBinding.inflate(getLayoutInflater());</span><br></pre></td></tr></table></figure>
<p>如果你在 ListView 或者 RecyclerView adapter 使用 Data Binding 时，你可能会使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ListItemBinding binding = ListItemBinding.inflate(layoutInflater, viewGroup,</span><br><span class="line"><span class="keyword">false</span>);</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line">ListItemBinding binding = DataBindingUtil.inflate(layoutInflater, R.layout.list_item, viewGroup, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure>
<h3 id="绑定事件">绑定事件</h3><p>就像你可以在xml文件里面使用属性android:onClick绑定Activity里面的一个方法一样，Data Binding Library 扩展了更多的事件可以用来绑定方法，比如 View.OnLongClickListener 有个方法 onLongClick(), 你就可以使用 android:onLongClick 属性来绑定一个方法，需要注意的是绑定的方法的签名必须和该属性原本对应的方法的签名完全一样，否则编译阶段会报错。</p>
<p>下面举例来说明具体怎么使用，先看用来绑定事件的类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandlers</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClickButton</span><span class="params">(View view)</span> </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterFirstNameChanged</span><span class="params">(Editable s)</span> </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后就是layout文件：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span class="tag">&lt;<span class="title">layout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">variable</span> <span class="attribute">name</span>=<span class="value">"handlers"</span> <span class="attribute">type</span>=<span class="value">"com.example.Handlers"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">variable</span> <span class="attribute">name</span>=<span class="value">"user"</span> <span class="attribute">type</span>=<span class="value">"com.example.User"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">data</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">LinearLayout</span></span><br><span class="line">        <span class="attribute">android:orientation</span>=<span class="value">"vertical"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">EditText</span> <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:text</span>=<span class="value">"@&#123;user.firstName&#125;"</span></span><br><span class="line">            <span class="attribute">android:afterTextChanged</span>=<span class="value">"@&#123;handlers.afterFirstNameChanged&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">Button</span> <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:onClick</span>=<span class="value">"@&#123;handlers.onClickButton&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span><span class="tag">&lt;/<span class="title">layout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="深入_Layout_文件">深入 Layout 文件</h2><h3 id="Import">Import</h3><p>零个或多个 import 元素可能在 data 元素中使用。这些只用在你的 layout 文件中添加引用，就像在 Java 中：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">data</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">import</span> <span class="attribute">type</span>=<span class="value">"android.view.View"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">data</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>现在，View 可以使用你的 Binding 表达式：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">   <span class="attribute">android:text</span>=<span class="value">"@&#123;user.lastName&#125;"</span></span><br><span class="line">   <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">   <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">   <span class="attribute">android:visibility</span>=<span class="value">"@&#123;user.isAdult ? View.VISIBLE : View.GONE&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>当类名有冲突时，其中一个类名可以重命名为alias:：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">import</span> <span class="attribute">type</span>=<span class="value">"android.view.View"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">import</span> <span class="attribute">type</span>=<span class="value">"com.example.real.estate.View"</span></span><br><span class="line">        <span class="attribute">alias</span>=<span class="value">"Vista"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样，在该 layout 文件中 Vista 对应 com.example.real.estate.View，而View对应android.view.View。导入的类型可以在Variable和表达式中使用作为引用来使用：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">data</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">import</span> <span class="attribute">type</span>=<span class="value">"com.example.User"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">import</span> <span class="attribute">type</span>=<span class="value">"java.util.List"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">variable</span> <span class="attribute">name</span>=<span class="value">"user"</span> <span class="attribute">type</span>=<span class="value">"User"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">variable</span> <span class="attribute">name</span>=<span class="value">"userList"</span> <span class="attribute">type</span>=<span class="value">"List&lt;User&gt;"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="title">data</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：Android Studio还没有处理imports，所以自动导入Variable在你的IDE不能使用。您的app仍会正常编译，你可以在您的Variable定义中使用完全符合规定的名称来解决该IDE问题。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">   <span class="attribute">android:text</span>=<span class="value">"@&#123;((User)(user.connection)).lastName&#125;"</span></span><br><span class="line">   <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">   <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>导入的类型还可以在表达式中使用 static 属性和方法：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">data</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">import</span> <span class="attribute">type</span>=<span class="value">"com.example.MyStringUtils"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">variable</span> <span class="attribute">name</span>=<span class="value">"user"</span> <span class="attribute">type</span>=<span class="value">"com.example.User"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">data</span>&gt;</span></span><br><span class="line">…</span><br><span class="line"><span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">   <span class="attribute">android:text</span>=<span class="value">"@&#123;MyStringUtils.capitalize(user.lastName)&#125;"</span></span><br><span class="line">   <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">   <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span>/&gt;</span></span><br><span class="line">就像在Java中，java.lang。*是自动导入的。</span><br></pre></td></tr></table></figure>
<h3 id="Variables">Variables</h3><p>在data中可以使用任意数量的variable元素。每一个variable元素描述了一个用于layout文件中Binding表达式的属性。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">data</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">import</span> <span class="attribute">type</span>=<span class="value">"android.graphics.drawable.Drawable"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">variable</span> <span class="attribute">name</span>=<span class="value">"user"</span>  <span class="attribute">type</span>=<span class="value">"com.example.User"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">variable</span> <span class="attribute">name</span>=<span class="value">"image"</span> <span class="attribute">type</span>=<span class="value">"Drawable"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">variable</span> <span class="attribute">name</span>=<span class="value">"note"</span>  <span class="attribute">type</span>=<span class="value">"String"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">data</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>该Variable类型在编译时检查，因此如果一个Variable实现了Observable或observable collection，这应该反映在类型中。（译注：需要查找资料来理解）如果variable是一个没有实现Observable接口的基本类或者接口，Variables不会被observed！</p>
<p>当对于多种配置有不同的layout文件时（如，横向或纵向），Variables会被合并。这些layout文件之间必须不能有冲突的Variable定义。</p>
<p>产生的Binding类对于每一个描述的Variables都会有setter和getter。这些Variables会使用默认的Java值 - null（引用类型）、0（int）、false（boolean）等等，直到调用setter时。</p>
<h3 id="自定义_Binding_类名称">自定义 Binding 类名称</h3><p>默认情况下，Binding类的命名是基于所述layout文件的名称，用大写开头，除去下划线（）以及（）后的第一个字母大写，然后添加“Binding”后缀。这个类将被放置在一个模块封装包里的databinding封装包下。例如，所述layout文件contact_item.xml将生成ContactItemBinding。如果模块包是com.example.my.app，那么它将被放置在com.example.my.app.databinding。</p>
<p>Binding类可通过调整data元素中的class属性来重命名或放置在不同的包中。例如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">data</span> <span class="attribute">class</span>=<span class="value">"ContactItem"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="title">data</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在模块封装包的databinding包中会生成名为ContactItem的Binding类。如果要想让该类生成在不同的包种，你需要添加前缀.，如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">data</span> <span class="attribute">class</span>=<span class="value">".ContactItem"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="title">data</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在这个情况下，ContactItem类直接在模块包种生成。或者你可以提供整个包名：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">data</span> <span class="attribute">class</span>=<span class="value">"com.example.ContactItem"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="title">data</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Includes">Includes</h3><p>通过使用application namespace以及在属性中的Variable名字从容器layout中传递Variables到一个被包含的layout：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">layout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">        <span class="attribute">xmlns:bind</span>=<span class="value">"http://schemas.android.com/apk/res-auto"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">data</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="title">variable</span> <span class="attribute">name</span>=<span class="value">"user"</span> <span class="attribute">type</span>=<span class="value">"com.example.User"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="title">data</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">LinearLayout</span></span><br><span class="line">       <span class="attribute">android:orientation</span>=<span class="value">"vertical"</span></span><br><span class="line">       <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">       <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="title">include</span> <span class="attribute">layout</span>=<span class="value">"@layout/name"</span></span><br><span class="line">           <span class="attribute">bind:user</span>=<span class="value">"@&#123;user&#125;"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="title">include</span> <span class="attribute">layout</span>=<span class="value">"@layout/contact"</span></span><br><span class="line">           <span class="attribute">bind:user</span>=<span class="value">"@&#123;user&#125;"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">layout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意：在name.xml以及contact.xml两个layout文件中必需要有user variable</p>
<p>Data binding 不支持包含 merge 元素作为直接的子元素，比如以下layout是不支持的：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">layout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">        <span class="attribute">xmlns:bind</span>=<span class="value">"http://schemas.android.com/apk/res-auto"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">data</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="title">variable</span> <span class="attribute">name</span>=<span class="value">"user"</span> <span class="attribute">type</span>=<span class="value">"com.example.User"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="title">data</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">merge</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="title">include</span> <span class="attribute">layout</span>=<span class="value">"@layout/name"</span></span><br><span class="line">           <span class="attribute">bind:user</span>=<span class="value">"@&#123;user&#125;"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="title">include</span> <span class="attribute">layout</span>=<span class="value">"@layout/contact"</span></span><br><span class="line">           <span class="attribute">bind:user</span>=<span class="value">"@&#123;user&#125;"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="title">merge</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">layout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="表达式语言">表达式语言</h3><p>常用表达式跟Java表达式很像，以下这些是一样的：</p>
<ul>
<li>数学表达式 + – / * %</li>
<li>字符串链接 +</li>
<li>逻辑操作符 &amp;&amp; ||</li>
<li>二元操作符 &amp; | ^</li>
<li>一元操作符 + – ! ~</li>
<li>Shift &gt;&gt; &gt;&gt;&gt; &lt;&lt;</li>
<li>比较 == &gt; &lt; &gt;= &lt;=</li>
<li>instanceof</li>
<li>Grouping ()</li>
<li>Literals – character, String, numeric, null</li>
<li>Cast</li>
<li>函数调用</li>
<li>值域引用（Field access）</li>
<li>通过[]访问数组里面的对象</li>
<li>三元操作符 ?:</li>
</ul>
<p>示例：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">android:text="@&#123;String.valueOf(index + 1)&#125;"</span><br><span class="line">android:visibility="@&#123;age <span class="tag">&lt; <span class="attribute">13</span> ? <span class="attribute">View.GONE</span> <span class="attribute">:</span> <span class="attribute">View.VISIBLE</span>&#125;"</span><br><span class="line"><span class="attribute">android:transitionName</span>=<span class="value">'@&#123;"image_" + id&#125;'</span></span></span><br></pre></td></tr></table></figure>
<p>缺少的操作：</p>
<ul>
<li>this</li>
<li>super</li>
<li>new</li>
<li>显式泛型调用</li>
</ul>
<h4 id="Null合并操作">Null合并操作</h4><p>?? - 左边的对象如果它不是null，选择左边的对象；或者如果它是null，选择右边的对象：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:text="@&#123;user.displayName ?? user.lastName&#125;"</span><br></pre></td></tr></table></figure>
<p>函数上的写法如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:text="@&#123;user.displayName != null ? user.displayName : user.lastName&#125;"</span><br></pre></td></tr></table></figure>
<h4 id="属性引用">属性引用</h4><p>我们已经在前边“Data Binding表达式”中提到了JavaBean引用的简短格式。</p>
<p>当一个表达式引用一个类的属性，它仍使用同样的格式对于字段、getters以及ObservableFields。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:text="@&#123;user.lastName&#125;"</span><br></pre></td></tr></table></figure>
<h4 id="避免_NullPointerException">避免 NullPointerException</h4><p>Data Binding代码生成时自动检查是否为nulls来避免出现null pointer exceptions错误。例如，在表达式@{user.name}中，如果user是null，user.name会赋予它的默认值（null）。如果你引用user.age，age是int类型，那么它的默认值是0。</p>
<h4 id="集合">集合</h4><p>常用的集合：arrays、lists、sparse lists以及maps，为了简便都可以使用[]来访问。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">data</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">import</span> <span class="attribute">type</span>=<span class="value">"android.util.SparseArray"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">import</span> <span class="attribute">type</span>=<span class="value">"java.util.Map"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">import</span> <span class="attribute">type</span>=<span class="value">"java.util.List"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">variable</span> <span class="attribute">name</span>=<span class="value">"list"</span> <span class="attribute">type</span>=<span class="value">"List&lt;String&gt;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">variable</span> <span class="attribute">name</span>=<span class="value">"sparse"</span> <span class="attribute">type</span>=<span class="value">"SparseArray&lt;String&gt;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">variable</span> <span class="attribute">name</span>=<span class="value">"map"</span> <span class="attribute">type</span>=<span class="value">"Map&lt;String, String&gt;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">variable</span> <span class="attribute">name</span>=<span class="value">"index"</span> <span class="attribute">type</span>=<span class="value">"int"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">variable</span> <span class="attribute">name</span>=<span class="value">"key"</span> <span class="attribute">type</span>=<span class="value">"String"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">data</span>&gt;</span></span><br><span class="line">…</span><br><span class="line">android:text="@&#123;list[index]&#125;"</span><br><span class="line">…</span><br><span class="line">android:text="@&#123;sparse[index]&#125;"</span><br><span class="line">…</span><br><span class="line">android:text="@&#123;map[key]&#125;"</span><br></pre></td></tr></table></figure>
<h4 id="字符串">字符串</h4><p>当使用单引号包含属性值时，在表达式中使用双引号很容易：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:text='@&#123;map["firstName"]&#125;'</span><br></pre></td></tr></table></figure>
<p>使用双引号来包含属性值也是可以的。字符串前后需要使用”`”：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android:text="@&#123;map[`firstName`]&#125;"</span><br><span class="line">android:text="@&#123;map["firstName"]&#125;"</span><br></pre></td></tr></table></figure>
<h4 id="Resources">Resources</h4><p>使用正常的表达式来访问resources也是可行的：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:padding="@&#123;large? @dimen/largePadding : @dimen/smallPadding&#125;"</span><br></pre></td></tr></table></figure>
<p>格式化字符串和复数可以通过提供参数来判断</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android:text="@&#123;@string/nameFormat(firstName, lastName)&#125;"</span><br><span class="line">android:text="@&#123;@plurals/banana(bananaCount)&#125;"</span><br></pre></td></tr></table></figure>
<p>当复数需要多个参数时，所有的参数都会通过：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  Have an orange</span><br><span class="line">  Have %d oranges</span><br><span class="line"></span><br><span class="line">android:text="@&#123;@plurals/orange(orangeCount, orangeCount)&#125;"</span><br></pre></td></tr></table></figure>
<p>一些资源需要显式类型判断：</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Normal Reference</th>
<th>Expression Reference</th>
</tr>
</thead>
<tbody>
<tr>
<td>String[]</td>
<td>@array</td>
<td>@stringArray</td>
</tr>
<tr>
<td>int[]</td>
<td>@array</td>
<td>@intArray</td>
</tr>
<tr>
<td>TypedArray</td>
<td>@array</td>
<td>@typedArray</td>
</tr>
<tr>
<td>Animator</td>
<td>@animator</td>
<td>@animator</td>
</tr>
<tr>
<td>StateListAnimator</td>
<td>@animator</td>
<td>@stateListAnimator</td>
</tr>
<tr>
<td>color int</td>
<td>@color</td>
<td>@color</td>
</tr>
<tr>
<td>ColorStateList</td>
<td>@color</td>
<td>@colorStateList</td>
</tr>
</tbody>
</table>
<h2 id="Data_Object-1">Data Object</h2><p>任何Plain old Java object（PO​​JO）可用于Data Binding，但修改POJO不会导致UI更新。Data Binding的真正能力是当数据变化时，可以通知给你的Data对象。有三种不同的数据变化通知机制：Observable对象、ObservableFields以及observable collections。</p>
<p>当这些可观察Data对象​​绑定到UI，Data对象属性的更改后，UI也将自动更新。</p>
<h3 id="Observable_对象">Observable 对象</h3><p>实现android.databinding.Observable接口的类可以允许附加一个监听器到Bound对象以便监听对象上的所有属性的变化。</p>
<p>Observable接口有一个机制来添加和删除监听器，但通知与否由开发人员管理。为了使开发更容易，一个BaseObservable的基类为实现监听器注册机制而创建。Data实现类依然负责通知当属性改变时。这是通过指定一个Bindable注解给getter以及setter内通知来完成的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">BaseObservable</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> String firstName;</span><br><span class="line">   <span class="keyword">private</span> String lastName;</span><br><span class="line">   <span class="annotation">@Bindable</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.firstName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="annotation">@Bindable</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.lastName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirstName</span><span class="params">(String firstName)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">       notifyPropertyChanged(BR.firstName);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">       notifyPropertyChanged(BR.lastName);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在编译期间，Bindable注解在BR类文件中生成一个Entry。BR类文件会在模块包内生成。如果用于Data类的基类不能改变，Observable接口通过方便的PropertyChangeRegistry来实现用于储存和有效地通知监听器。</p>
<h3 id="Observable_字段">Observable 字段</h3><p>一些小工作会涉及到创建Observable类，因此那些想要节省时间或者几乎没有几个属性的开发者可以使用ObservableFields。ObservableFields是自包含具有单个字段的observable对象。它有所有基本类型和一个是引用类型。要使用它需要在data对象中创建public final字段：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">BaseObservable</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> ObservableField&lt;String&gt; firstName =</span><br><span class="line">       <span class="keyword">new</span> ObservableField&lt;&gt;();</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> ObservableField&lt;String&gt; lastName =</span><br><span class="line">       <span class="keyword">new</span> ObservableField&lt;&gt;();</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> ObservableInt age = <span class="keyword">new</span> ObservableInt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>就是这样，要访问该值，使用set和get方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user.firstName.set(<span class="string">"Google"</span>);</span><br><span class="line"><span class="keyword">int</span> age = user.age.get();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在实践过程中，有时 notifyPropertyChanged(BR.lastName); 很容易引用错误，因此，开发过程中还是推荐使用 ObservableField。</p>
</blockquote>
<h3 id="Observable_集合">Observable 集合</h3><p>一些app使用更多的动态结构来保存数据。Observable集合允许键控访问这些data对象。ObservableArrayMap用于键是引用类型,如String。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ObservableArrayMap&lt;String, Object&gt; user = <span class="keyword">new</span> ObservableArrayMap&lt;&gt;();</span><br><span class="line">user.put(<span class="string">"firstName"</span>, <span class="string">"Google"</span>);</span><br><span class="line">user.put(<span class="string">"lastName"</span>, <span class="string">"Inc."</span>);</span><br><span class="line">user.put(<span class="string">"age"</span>, <span class="number">17</span>);</span><br></pre></td></tr></table></figure>
<p>在layout文件中，通过String键可以访问map：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">data</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">import</span> <span class="attribute">type</span>=<span class="value">"android.databinding.ObservableMap"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">variable</span> <span class="attribute">name</span>=<span class="value">"user"</span> <span class="attribute">type</span>=<span class="value">"ObservableMap&lt;String, Object&gt;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">data</span>&gt;</span></span><br><span class="line">…</span><br><span class="line"><span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">   <span class="attribute">android:text</span>=<span class="value">'@&#123;user["lastName"]&#125;'</span></span><br><span class="line">   <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">   <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">   <span class="attribute">android:text</span>=<span class="value">'@&#123;String.valueOf(1 + (Integer)user["age"])&#125;'</span></span><br><span class="line">   <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">   <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>ObservableArrayList 在整形键值很有用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ObservableArrayList&lt;Object&gt; user = <span class="keyword">new</span> ObservableArrayList&lt;&gt;();</span><br><span class="line">user.add(<span class="string">"Google"</span>);</span><br><span class="line">user.add(<span class="string">"Inc."</span>);</span><br><span class="line">user.add(<span class="number">17</span>);</span><br></pre></td></tr></table></figure>
<p>在layout文件中，通过索引可以访问list：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">data</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">import</span> <span class="attribute">type</span>=<span class="value">"android.databinding.ObservableList"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">import</span> <span class="attribute">type</span>=<span class="value">"com.example.my.app.Fields"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">variable</span> <span class="attribute">name</span>=<span class="value">"user"</span> <span class="attribute">type</span>=<span class="value">"ObservableList&lt;Object&gt;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">data</span>&gt;</span></span><br><span class="line">…</span><br><span class="line"><span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">   <span class="attribute">android:text</span>=<span class="value">'@&#123;user[Fields.LAST_NAME]&#125;'</span></span><br><span class="line">   <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">   <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">   <span class="attribute">android:text</span>=<span class="value">'@&#123;String.valueOf(1 + (Integer)user[Fields.AGE])&#125;'</span></span><br><span class="line">   <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">   <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="生成_Binding">生成 Binding</h2><p>Binding类的生成链接了layout中variables与Views。如前所述，Binding的名称和包名可以定制。所生成的Binding类都扩展了android.databinding.ViewDataBinding。</p>
<h3 id="创建">创建</h3><p>Binding应在inflation之后就立马创建，以确保View层次结构不在之前打扰layout中的binding到views上的表达式。有几个方法可以绑定到一个layout。最常见的是在Binding类上使用静态方法.inflate方法载入View的层次结构并且绑定到它只需这一步。还有一个更简单的版本，只需要LayoutInflater还有一个是采用ViewGroup：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyLayoutBinding binding = MyLayoutBinding.inflate(layoutInflater);</span><br><span class="line">MyLayoutBinding binding = MyLayoutBinding.inflate(LayoutInflater, viewGroup, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure>
<p>如果使用不同的机制载入layout，他可一分开绑定：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MyLayoutBinding binding = MyLayoutBinding.bind(viewRoot);</span><br></pre></td></tr></table></figure>
<p>有时Binding不能提前知道，对于这种情况，可以使用DataBindingUtil类来创建Binding：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ViewDataBinding binding = DataBindingUtil.inflate(LayoutInflater, layoutId,</span><br><span class="line">    parent, attachToParent);</span><br><span class="line">ViewDataBinding binding = DataBindingUtil.bindTo(viewRoot, layoutId);</span><br></pre></td></tr></table></figure>
<h3 id="带ID的Views">带ID的Views</h3><p>在layout中对于每个带ID的View会生成一个public final字段。Binding在View层次结构上做单一的传递，提取带ID的Views。这种机制比起某些Views使用findViewById还要快。例如:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">layout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">data</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="title">variable</span> <span class="attribute">name</span>=<span class="value">"user"</span> <span class="attribute">type</span>=<span class="value">"com.example.User"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="title">data</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">LinearLayout</span></span><br><span class="line">       <span class="attribute">android:orientation</span>=<span class="value">"vertical"</span></span><br><span class="line">       <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">       <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="title">TextView</span> <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">           <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">           <span class="attribute">android:text</span>=<span class="value">"@&#123;user.firstName&#125;"</span></span><br><span class="line">   <span class="attribute">android:id</span>=<span class="value">"@+id/firstName"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="title">TextView</span> <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">           <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">           <span class="attribute">android:text</span>=<span class="value">"@&#123;user.lastName&#125;"</span></span><br><span class="line">  <span class="attribute">android:id</span>=<span class="value">"@+id/lastName"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">layout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>它会生成如下的Binding类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> TextView firstName;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> TextView lastName;</span><br></pre></td></tr></table></figure>
<p>IDs不像没有Data Bindings那样几乎没有必要，但是仍然会有一些实例需要从代码中访问Views。</p>
<h3 id="Variables-1">Variables</h3><p>每个Variable会有访问方法。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">data</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">import</span> <span class="attribute">type</span>=<span class="value">"android.graphics.drawable.Drawable"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">variable</span> <span class="attribute">name</span>=<span class="value">"user"</span>  <span class="attribute">type</span>=<span class="value">"com.example.User"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">variable</span> <span class="attribute">name</span>=<span class="value">"image"</span> <span class="attribute">type</span>=<span class="value">"Drawable"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">variable</span> <span class="attribute">name</span>=<span class="value">"note"</span>  <span class="attribute">type</span>=<span class="value">"String"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">data</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>它会在Binding中生成setters和getters：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> com.example.<span class="function">User <span class="title">getUser</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(com.example.User user)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Drawable <span class="title">getImage</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setImage</span><span class="params">(Drawable image)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getNote</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setNote</span><span class="params">(String note)</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="Binding进阶">Binding进阶</h3><h4 id="动态Variables">动态Variables</h4><p>有时，不知道具体的Binding类，例如，一个RecyclerView适配器对layouts任意操作并不知道具体的Binding类。它仍然必需在onBindViewHolder期间赋值给Binding。</p>
<p>在这个例子中，该RecyclerView绑定的所有layouts有一个“item”的Variable。该BindingHolder有一个getBinding方法返回ViewDataBinding。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(BindingHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">final</span> T item = mItems.get(position);</span><br><span class="line">   holder.getBinding().setVariable(BR.item, item);</span><br><span class="line">   holder.getBinding().executePendingBindings();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="直接Binding">直接Binding</h4><p>当一个variable或observable变化时，binding会在计划在下一帧之前执行改变。可能会发生很多次，但是在Binding时必须立即执行。要强制执行，使用executePendingBindings()方法。</p>
<h4 id="后台线程">后台线程</h4><p>只要它不是一个集合，你可以在后台线程中改变你的数据模型。在判断是否要避免任何并发问题时，Data Binding会对每个Varialbe/field本地化。</p>
<h2 id="属性Setters">属性Setters</h2><p>每当绑定值的变化，生成的Binding类必须调用setter方法。Data Binding 框架有可以自定义赋值的方法。</p>
<h3 id="自动Setters">自动Setters</h3><p>对于一个属性，Data Binding试图找到setAttribute方法。与该属性的namespace并不什么关系，仅仅与属性本身名称有关。</p>
<p>例如，有关TextView的android:text属性的表达式会寻找一个setText(String)的方法。如果表达式返回一个int，Data Binding会搜索的setText(int)方法。注意：要表达式返回正确的类型，如果需要的话使用casting。Data Binding仍会工作即使没有给定名称的属性存在。然后，您可以通过Data Binding轻松地为任何setter“创造”属性。例如，DrawerLayout没有任何属性，但有大量的setters。您可以使用自动setters来使用其中的一个。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">android.support.v4.widget.DrawerLayout</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">    <span class="attribute">app:scrimColor</span>=<span class="value">"@&#123;@color/scrim&#125;"</span></span><br><span class="line">    <span class="attribute">app:drawerListener</span>=<span class="value">"@&#123;fragment.drawerListener&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="重命名的Setters">重命名的Setters</h3><p>一些有setters的属性按名称并不匹配。对于这些方法，属性可以通过BindingMethods注解相关联。这必须与一个包含BindingMethod注解的类相关联，每一个用于一个重命名的方法。例如，android:tint属性与setImageTintList相关联，而不与setTint相关。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@BindingMethods</span>(&#123;</span><br><span class="line">       <span class="annotation">@BindingMethod</span>(type = <span class="string">"android.widget.ImageView"</span>,</span><br><span class="line">                      attribute = <span class="string">"android:tint"</span>,</span><br><span class="line">                      method = <span class="string">"setImageTintList"</span>),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>以上例子，开发者需要重命名setters是不太可能了，android架构属性已经实现了。</p>
<h3 id="自定义Setters">自定义Setters</h3><p>有些属性需要自定义绑定逻辑。例如，对于android:paddingLeft属性并没有相关setter。相反，setPadding(left, top, right, bottom)是存在在。一个带有BindingAdapter注解的静态绑定适配器方法允许开发者自定义setter如何对于一个属性的调用。</p>
<p>Android的属性已经创造了BindingAdapters。举例来说，对于paddingLeft：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@BindingAdapter</span>(<span class="string">"android:paddingLeft"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setPaddingLeft</span><span class="params">(View view, <span class="keyword">int</span> padding)</span> </span>&#123;</span><br><span class="line">   view.setPadding(padding,</span><br><span class="line">                   view.getPaddingTop(),</span><br><span class="line">                   view.getPaddingRight(),</span><br><span class="line">                   view.getPaddingBottom());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Binding适配器对其他定制类型非常有用。例如，自定义loader可以用来异步载入图像。</p>
<p>当有冲突时，开发人员创建的Binding适配器将覆盖Data Binding默认适配器。</p>
<p>您也可以创建可以接收多个参数的适配器。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@BindingAdapter</span>(&#123;<span class="string">"bind:imageUrl"</span>, <span class="string">"bind:error"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadImage</span><span class="params">(ImageView view, String url, Drawable error)</span> </span>&#123;</span><br><span class="line">   Picasso.with(view.getContext()).load(url).error(error).into(view);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ImageView</span> <span class="attribute">app:imageUrl</span>=<span class="value">“@&#123;venue.imageUrl&#125;”</span></span><br><span class="line"><span class="attribute">app:error</span>=<span class="value">“@&#123;@drawable</span>/<span class="attribute">venueError</span>&#125;”/&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果对于一个ImageViewimageUrl和error都被使用并且imageUrl是一个string类型以及error是一个drawable时，该适配器会被调用。</p>
<ul>
<li>匹配的过程中自定义namespaces将被忽略。</li>
<li>你也可以为Android namespaces写适配器。</li>
</ul>
<p>Binding适配器方法可能从handlers中获取旧的属性值. 同时获取新旧属性值的方法应该把旧的属性值作为参数放在前边，紧跟着是新的属性值：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@BindingAdapter</span>(<span class="string">"android:paddingLeft"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setPaddingLeft</span><span class="params">(View view, <span class="keyword">int</span> oldPadding, <span class="keyword">int</span> newPadding)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (oldPadding != newPadding) &#123;</span><br><span class="line">       view.setPadding(newPadding,</span><br><span class="line">                       view.getPaddingTop(),</span><br><span class="line">                       view.getPaddingRight(),</span><br><span class="line">                       view.getPaddingBottom());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>事件处理器可仅在接口或者抽象类中使用，如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@BindingAdapter</span>(<span class="string">"android:onLayoutChange"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setOnLayoutChangeListener</span><span class="params">(View view, View.OnLayoutChangeListener oldValue,</span><br><span class="line">       View.OnLayoutChangeListener newValue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB) &#123;</span><br><span class="line">        <span class="keyword">if</span> (oldValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">            view.removeOnLayoutChangeListener(oldValue);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">            view.addOnLayoutChangeListener(newValue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当监听器有多个方法时，必须被拆分成多个监听器。如 View.OnAttachStateChangeListener 有两个方法：onViewAttachedToWindow() 和 onViewDetachedFromWindow(). 则我们必须创建两个接口以为之区分属性和处理器：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@TargetApi</span>(VERSION_CODES.HONEYCOMB_MR1)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnViewDetachedFromWindow</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onViewDetachedFromWindow</span><span class="params">(View v)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@TargetApi</span>(VERSION_CODES.HONEYCOMB_MR1)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnViewAttachedToWindow</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onViewAttachedToWindow</span><span class="params">(View v)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为改变某个监听器会影响到其他的监听器，我们必须编码三个不同的binding适配器，为每个属性各编写一个，并同时为两者一起编写一个，他们必须同时被设置。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@BindingAdapter</span>(<span class="string">"android:onViewAttachedToWindow"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setListener</span><span class="params">(View view, OnViewAttachedToWindow attached)</span> </span>&#123;</span><br><span class="line">    setListener(view, <span class="keyword">null</span>, attached);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@BindingAdapter</span>(<span class="string">"android:onViewDetachedFromWindow"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setListener</span><span class="params">(View view, OnViewDetachedFromWindow detached)</span> </span>&#123;</span><br><span class="line">    setListener(view, detached, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@BindingAdapter</span>(&#123;<span class="string">"android:onViewDetachedFromWindow"</span>, <span class="string">"android:onViewAttachedToWindow"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setListener</span><span class="params">(View view, <span class="keyword">final</span> OnViewDetachedFromWindow detach,</span><br><span class="line">        <span class="keyword">final</span> OnViewAttachedToWindow attach)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (VERSION.SDK_INT &gt;= VERSION_CODES.HONEYCOMB_MR1) &#123;</span><br><span class="line">        <span class="keyword">final</span> OnAttachStateChangeListener newListener;</span><br><span class="line">        <span class="keyword">if</span> (detach == <span class="keyword">null</span> &amp;&amp; attach == <span class="keyword">null</span>) &#123;</span><br><span class="line">            newListener = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            newListener = <span class="keyword">new</span> OnAttachStateChangeListener() &#123;</span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewAttachedToWindow</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (attach != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        attach.onViewAttachedToWindow(v);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewDetachedFromWindow</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (detach != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        detach.onViewDetachedFromWindow(v);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> OnAttachStateChangeListener oldListener = ListenerUtil.trackListener(view,</span><br><span class="line">                newListener, R.id.onAttachStateChangeListener);</span><br><span class="line">        <span class="keyword">if</span> (oldListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">            view.removeOnAttachStateChangeListener(oldListener);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">            view.addOnAttachStateChangeListener(newListener);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的例子较通常而言稍微复杂一些，因为 View 通过 add/remove 来使用监听器，而不是为 View.OnAttachStateChangeListener 使用一个 set 方法。android.databinding.adapters.ListenerUtil 类保持对之前所有监听器的追踪，所以，他们必须从绑定适配器中移除。</p>
<p>通过对接口 OnViewDetachedFromWindow 和 OnViewAttachedToWindow 用 @TargetApi(VERSION_CODES.HONEYCOMB_MR1) 进行注解, 数据绑定代码生成器明白监听器仅需在运行 Honeycomb 及以上版本的设备上生成，<br>addOnAttachStateChangeListener(View.OnAttachStateChangeListener) 支持同样的版本.</p>
<h2 id="转换">转换</h2><h3 id="对象转换">对象转换</h3><p>当从Binding表达式返回一个对象，一个setter会从自动、重命名以及自定义的setters中选择。该对象将被转换为所选择的setter的参数类型。</p>
<p>这是为了方便那些使用ObservableMaps来保存数据。例如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">   <span class="attribute">android:text</span>=<span class="value">'@&#123;userMap["lastName"]&#125;'</span></span><br><span class="line">   <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">   <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>在userMap返回一个对象并且该对象将自动转换为setText(CharSequence)的参数类型。当有关参数类型可能混乱时，开发人员需要在表达式中转换。</p>
<h3 id="自定义转换">自定义转换</h3><p>有时候转换应该是自动的在特定类型之间。例如，设置背景的时候：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">View</span></span><br><span class="line">   <span class="attribute">android:background</span>=<span class="value">"@&#123;isError ? @color/red : @color/white&#125;"</span></span><br><span class="line">   <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">   <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span>/&gt;</span></span><br><span class="line">```   </span><br><span class="line"></span><br><span class="line">这里，背景需要Drawable对象，但颜色是一个整数。不管何时有Drawable并且返回值是一个整数，那么整数类型会被转换为ColorDrawable。这个转换是通过使用带有BindingConversion注解的静态方法完成的：</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">@BindingConversion</span><br><span class="line">public static ColorDrawable convertColorToDrawable(int color) &#123;</span><br><span class="line">   return new ColorDrawable(color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：转换仅仅发生在setter级别，因此它不允许以下混合类型：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">View</span></span><br><span class="line">   <span class="attribute">android:background</span>=<span class="value">"@&#123;isError ? @drawable/error : @color/white&#125;"</span></span><br><span class="line">   <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">   <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Android_Studio_对数据绑定的支持">Android Studio 对数据绑定的支持</h2><p>Android Studio 支持数据绑定表达式的语法高亮，并可在编辑器中标示表达式语法错误。</p>
<p>预览窗格可显示数据绑定表达式的预设默认值，在下面的例子中，预览窗格在 TextView 中显示默认的 PLACEHOLDER 文本值。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">TextView</span> <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">   <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">   <span class="attribute">android:text</span>=<span class="value">"@&#123;user.firstName, default=PLACEHOLDER&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果你需要在设计期间显示默认值，你也可以使用 tools:attributes 代替默认表达式值。</p>
<h1 id="参考资料">参考资料</h1><ul>
<li><a href="https://github.com/livoras/blog/issues/11" target="_blank" rel="external">界面之下：还原真实的MV*模式</a></li>
<li><a href="https://developer.android.com/intl/zh-cn/tools/data-binding/guide.html#data_binding_layout_files" target="_blank" rel="external">Android 官方英文指南</a></li>
<li><a href="http://segmentfault.com/a/1190000002876984" target="_blank" rel="external">Data Binding（数据绑定）用户指南</a></li>
</ul>
]]></content:encoded>
      <comments>http://fyun.li/2015/12/26/android-data-binding/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[Ubuntu 搭建 shadowsocks]]></title>
      <link>http://fyun.li/2015/12/19/ubuntu-ss/</link>
      <guid>http://fyun.li/2015/12/19/ubuntu-ss/</guid>
      <pubDate>Sat, 19 Dec 2015 11:30:21 GMT</pubDate>
      <description>
      <![CDATA[<p>在Ubuntu下安装ss很简单。只需要依次执行下面3条命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pr]]>
      </description>
      <content:encoded><![CDATA[<p>在Ubuntu下安装ss很简单。只需要依次执行下面3条命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update&#10;apt-get install python-pip&#10;pip install shadowsocks</span><br></pre></td></tr></table></figure>
<p>pip 是 python 下的方便安装的工具，类似 apt-get。</p>
<p>全部执行完毕且没有报错的话，我们的 shadowsocks 就算是装完了。接下来就是配置部署了。</p>
<p>写一个配置文件保存为etc/shadowsocks.json，文件内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#10;    &#34;server&#34;:&#34;my_server_ip&#34;,&#10;    &#34;server_port&#34;:8388,&#10;    &#34;local_address&#34;: &#34;127.0.0.1&#34;,&#10;    &#34;local_port&#34;:1080,&#10;    &#34;password&#34;:&#34;mypassword&#34;,&#10;    &#34;timeout&#34;:300,&#10;    &#34;method&#34;:&#34;aes-256-cfb&#34;,&#10;    &#34;fast_open&#34;: false&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>server, server_port, password 需要自行根据自己的实际情况修改。</p>
<p>配置文件编辑完成后，接下来就可以部署运行了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks.json -d start</span><br></pre></td></tr></table></figure>
<p>当然，我们可不希望每次重启服务器都手动启动 SS, 因此我们要把这条命令放到这个文件下：/etc/rc.d/rc.local，这样以后就能开机自动运行了。</p>
<p>好了，打开客户端呼吸墙外的空气吧！</p>
<p><a href="https://shadowsocks.com/client.html" target="_blank" rel="external">客户端下载链接</a></p>
]]></content:encoded>
      <comments>http://fyun.li/2015/12/19/ubuntu-ss/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[Fix Android Studio DataBinding cannot resolve symbol 'databinding' bug]]></title>
      <link>http://fyun.li/2015/12/15/android-databinding-bug/</link>
      <guid>http://fyun.li/2015/12/15/android-databinding-bug/</guid>
      <pubDate>Tue, 15 Dec 2015 12:14:14 GMT</pubDate>
      <description>
      <![CDATA[<p>Android DataBinding 使起来还是蛮有趣的，但是 Android Studio 总是不时莫名其貌的出状况，找不着生成的 databinding classes。构建的时候会出现如下提示：</p>
<p><img src="http://ww2.sinaimg]]>
      </description>
      <content:encoded><![CDATA[<p>Android DataBinding 使起来还是蛮有趣的，但是 Android Studio 总是不时莫名其貌的出状况，找不着生成的 databinding classes。构建的时候会出现如下提示：</p>
<p><img src="http://ww2.sinaimg.cn/large/620f1e7egw1ez0lt0wuf8j20v005fjsh.jpg" alt="构建提示"></p>
<p>Google 了一些方法都不灵。最后只有以下这样将生成的 java 文件 copy 到正确位置解决问题。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// fix for dataBinder: Source folders generated at incorrect location&#10;android.applicationVariants.all &#123; variant -&#62;&#10;    def variantName = variant.name.capitalize()&#10;    def inputDir    = &#34;$&#123;buildDir&#125;/intermediates/classes/$&#123;variant.dirName&#125;&#34;&#10;    def sourceDir   = &#34;$&#123;buildDir&#125;/generated/source/dataBinding/$&#123;variant.dirName&#125;&#34;&#10;    def copyTask    = tasks.create(name: &#34;dataBindingFix$&#123;variantName&#125;&#34;, type: Copy) &#123;&#10;        from inputDir&#10;        into sourceDir&#10;        include &#39;**/*.java&#39;&#10;    &#125;&#10;    tasks[&#34;generate$&#123;variantName&#125;Sources&#34;].dependsOn copyTask&#10;    variant.addJavaSourceFoldersToModel new File(sourceDir)&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>遇上同样问题的同学，将以下脚本加到 app build.gralde 就可以了。</p>
]]></content:encoded>
      <comments>http://fyun.li/2015/12/15/android-databinding-bug/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[Dagger2 小记]]></title>
      <link>http://fyun.li/2015/11/22/dagger2-get-start/</link>
      <guid>http://fyun.li/2015/11/22/dagger2-get-start/</guid>
      <pubDate>Sun, 22 Nov 2015 14:05:00 GMT</pubDate>
      <description>
      <![CDATA[<h1 id="0x00_开始">0x00 开始</h1><p>开始以最无趣的 “Hello World” 开始吧。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class Hello &#123;&#10;&#9;&#10;&#9;public String greeting()&#123;&#10;&#9;&#9;return &#34;Hello World.&#34;;&#10;&#9;&#125;&#10;&#9;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>然后在 TextView 中显示，常规的方法是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello hello = new Hello();&#10;textViewHello.setText(hello.greeting());</span><br></pre></td></tr></table></figure>
<p>那么，如果使用 Dagger2 进行依赖注入，我们使用 @Inject 将 Hello 实例注入：</p>]]>
      
      </description>
      <content:encoded><![CDATA[<h1 id="0x00_开始">0x00 开始</h1><p>开始以最无趣的 “Hello World” 开始吧。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class Hello &#123;&#10;&#9;&#10;&#9;public String greeting()&#123;&#10;&#9;&#9;return &#34;Hello World.&#34;;&#10;&#9;&#125;&#10;&#9;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>然后在 TextView 中显示，常规的方法是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello hello = new Hello();&#10;textViewHello.setText(hello.greeting());</span><br></pre></td></tr></table></figure>
<p>那么，如果使用 Dagger2 进行依赖注入，我们使用 @Inject 将 Hello 实例注入：</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Inject Hello hello;&#10;&#10;...&#10;&#10;textViewHello.setText(hello.greeting());</span><br></pre></td></tr></table></figure>
<p>这里存在一个问题：要怎么实例化 Hello 呢? Dagger2 提供 @Inject 标注，在构造函数中标注后，当需要实例化时，Dagger2 就会调用这个构造函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Singleton&#10;public class Hello &#123;&#10;&#10;&#9;@Inject public Hello() &#123;&#125;&#10;&#9;&#10;&#9;public String greeting()&#123;&#10;&#9;&#9;return &#34;Hello World.&#34;;&#10;&#9;&#125;&#10;&#9;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>PS: 加入 Hello 也需要注入其他类呢？ @Inject 同样轻松搞定，构造函数参数以及类成员属性均可轻松注入。</p>
<p>这时依然无法工作，如果你运行程序，会产生悲伤的 NullPointerException，那么还差什么呢？</p>
<p>我们需要创建一个Component，Component是Provider和Injector之间的桥梁。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Singleton&#10;@Component&#10;public interface DemoComponent &#123;&#10;&#10;    void inject(MainActivity activity);&#10;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>Dagger2 会自动生成一个 DaggerDemoComponent，在 Activity 中调用注入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DaggerDemoComponent.create().inject(this);</span><br></pre></td></tr></table></figure>
<p>打完收工！</p>
<p>当然，你还需要通过 gradle 引入 Dagger2:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...&#10;apply plugin: &#39;com.neenbedankt.android-apt&#39;&#10;&#10;buildscript &#123;&#10;    repositories &#123;&#10;        jcenter()&#10;    &#125;&#10;&#10;    dependencies &#123;&#10;        classpath &#39;com.neenbedankt.gradle.plugins:android-apt:1.4&#39;&#10;    &#125;&#10;&#125;&#10;&#10;...&#10;&#10;dependencies &#123;&#10;&#9;...&#10;    provided &#39;javax.annotation:javax.annotation-api:1.2&#39;&#10;    apt &#39;com.google.dagger:dagger-compiler:2.0.2&#39;&#10;    compile &#39;com.google.dagger:dagger:2.0.2&#39;&#10;&#125;</span><br></pre></td></tr></table></figure>
<h1 id="0x01_进阶">0x01 进阶</h1><p>如上所述，我们自己写的代码可以通过 @Inject 实例化并注入，但若是第三方库提供的类呢？</p>
<p>这时需要用到 @Module, @Provide:</p>
<p>@Module</p>
<p>Module 是拥有可以提供依赖的函数的类，我们定义一个类，标注为 @Module,然后 Dagger2 就知道哪里可以找到构建一个对象所需要的依赖啦。而且 Module 被设计为可以被分割和组合的模式，有益于模块的划分。</p>
<p>@Provide</p>
<p>在标注为 @Module 的类中的函数可以标注为 @Provide, 标示可以提供相应的依赖，函数的前缀必须为 provides.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Module&#10;public class DemoModule &#123;&#10;&#10;    @Provides @Singleton&#10;    public GithubService provideGithubService() &#123;&#10;        return new GithubService();&#10;    &#125;&#10;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>然后我们要告知 Component 使用这个 Module: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Singleton&#10;@Component(modules = &#123;DemoModule.class&#125;)&#10;public interface DemoComponent &#123;&#10;&#10;    void inject(MainActivity activity);&#10;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>@Component 可以通过 dependencies 申明依赖依他的 @Component。</p>
<p>@Singleton</p>
<p>这是标示一个单例的注释，可以和 @Provide 共同标注一个函数，标示这个函数返回的对象都是单例的，也可以和 @Component 一起标注一个Component，标示这个 Component 的 Scope 是全局的。</p>
<p>@Scope</p>
<p>Scopes 非常的有用，Dagger2 可以通过自定义注解限定注解作用域。</p>
<p>下面我们定义一个生命周期和 Activity 一致的组件。</p>
<p>首先我们要申明一个 @Scope:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Scope&#10;@Retention(RetentionPolicy.RUNTIME)&#10;public @interface ActivityScope &#123;&#10;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>然后是 ActivityModule, 这个和前面 @Module 一样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Module&#10;public class ActivityModule &#123;&#10;    private final Activity activity;&#10;&#10;    public ActivityModule(Activity activity) &#123;&#10;        this.activity = activity;&#10;    &#125;&#10;&#10;    @Provides&#10;    @ActivityScope&#10;    Activity activity() &#123;&#10;        return this.activity;&#10;    &#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>接着声明 ActivityComponent 为 @ActivityScope:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@ActivityScope&#10;@Component(dependencies = AppComponent.class, modules = ActivityModule.class)&#10;public interface ActivityComponent &#123;&#10;    inject(MainActivity activity);&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>在 Activity 中注入:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Override&#10;protected void onCreate(Bundle savedInstanceState) &#123;&#10;    super.onCreate(savedInstanceState);&#10;    getActivityComponent().inject(this);&#10;&#125;&#10;&#10;...&#10;// &#24314;&#35758;&#22312;&#22522;&#31867; Activity &#20013;&#22768;&#26126;&#26041;&#27861;&#10;protected ActivityComponent getActivityComponent() &#123;&#10;    return DaggerActivityComponent.builder()&#10;            .appComponent(DaggerAppComponent.create())&#10;            .activityModule(getActivityModule())&#10;            .build();&#10;&#125;&#10;&#10;protected ActivityModule getActivityModule() &#123;&#10;    return new ActivityModule(this);&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>最后 @Provides 方法或者可以直接注入的类中标注 @ActivityScope 即可让注入的实例与 Activity 声明周期保持一致。</p>
<p>@Qualifier</p>
<p>当类的类型不足以鉴别一个依赖的时候，我们就可以使用这个注解标示。</p>
<p>例如：在Android中，我们会需要不同类型的 Context，所以我们就可以定义 Qualifier 注解 @ForApplication 和 @ForActivity，这样当注入一个 Context 的时候，我们就可以告诉 Dagger 我们想要哪种类型的 Context。</p>
<h1 id="0x02_参考">0x02 参考</h1><p><a href="http://google.github.io/dagger/" target="_blank" rel="external">Dagger 2</a></p>
<p><a href="http://fernandocejas.com/2015/04/11/tasting-dagger-2-on-android/" target="_blank" rel="external">Tasting Dagger 2 on Android</a> 中文翻译版本：<a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0519/2892.html" target="_blank" rel="external">详解Dagger2</a></p>
<p><a href="http://frogermcs.github.io/dependency-injection-with-dagger-2-the-api/" target="_blank" rel="external">Dependency injection with Dagger 2 - the API</a></p>
]]></content:encoded>
      <comments>http://fyun.li/2015/11/22/dagger2-get-start/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[JRE 导入 StartSSL 根证书]]></title>
      <link>http://fyun.li/2015/11/03/import-startssl-into-jre/</link>
      <guid>http://fyun.li/2015/11/03/import-startssl-into-jre/</guid>
      <pubDate>Tue, 03 Nov 2015 06:51:18 GMT</pubDate>
      <description>
      <![CDATA[<h1 id="0x00_绪言">0x00 绪言</h1><p>通过 java 执行 https 请求时可能出现以下错误:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target</span><br></pre></td></tr></table></figure>
<p>这是因为 java 在执行 SSL/TLS 通讯时使用特定的数据识别 Certificate Authorities(CA)，如果你试图发起的 SSL/TLS 连接使用不属于这些根证书机构所颁发的证书，就会抛出</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SunCertPathBuilderException: unable to find valid certification path to requested target</span><br></pre></td></tr></table></figure>
<p>因此，如果你使用自签名证书，或者根证书机构不在 JRE 默认信任列表中，则需要向 JRE 导入根证书。</p>]]>
      
      </description>
      <content:encoded><![CDATA[<h1 id="0x00_绪言">0x00 绪言</h1><p>通过 java 执行 https 请求时可能出现以下错误:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target</span><br></pre></td></tr></table></figure>
<p>这是因为 java 在执行 SSL/TLS 通讯时使用特定的数据识别 Certificate Authorities(CA)，如果你试图发起的 SSL/TLS 连接使用不属于这些根证书机构所颁发的证书，就会抛出</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SunCertPathBuilderException: unable to find valid certification path to requested target</span><br></pre></td></tr></table></figure>
<p>因此，如果你使用自签名证书，或者根证书机构不在 JRE 默认信任列表中，则需要向 JRE 导入根证书。</p>
<a id="more"></a>
<p>最近我们有个项目使用了沃通的免费 SSL 证书，因其根证书属于 StartSSL 并不在 JRE 默认信任列表中，因此简单记录下导入过程。</p>
<h1 id="0x01_导入根证书到_JRE">0x01 导入根证书到 JRE</h1><p>首先，我们需要获取根证书：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/tmp</span><br><span class="line">cd ~/tmp</span><br><span class="line"></span><br><span class="line">curl http:<span class="comment">//www.startssl.com/certs/ca.crt -O</span></span><br><span class="line">curl http:<span class="comment">//www.startssl.com/certs/sub.class1.server.ca.crt -O</span></span><br><span class="line">curl http:<span class="comment">//www.startssl.com/certs/sub.class2.server.ca.crt -O</span></span><br><span class="line">curl http:<span class="comment">//www.startssl.com/certs/sub.class3.server.ca.crt -O</span></span><br><span class="line">curl http:<span class="comment">//www.startssl.com/certs/sub.class4.server.ca.crt -O</span></span><br></pre></td></tr></table></figure>
<p>然后，将证书导入到 JRE 信任列表：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo keytool -<span class="keyword">import</span> -trustcacerts -keystore /Library/Java/JavaVirtualMachines/jdk1.8.0_25.jdk/Contents/Home/jre/lib/security/cacerts -storepass changeit -noprompt -alias startcom.ca -file ca.crt</span><br><span class="line"></span><br><span class="line">sudo keytool -<span class="keyword">import</span> -trustcacerts -keystore /Library/Java/JavaVirtualMachines/jdk1.8.0_25.jdk/Contents/Home/jre/lib/security/cacerts -storepass changeit -noprompt -alias startcom.ca.sub.class1 -file sub.class1.server.ca.crt</span><br><span class="line"></span><br><span class="line">sudo keytool -<span class="keyword">import</span> -trustcacerts -keystore /Library/Java/JavaVirtualMachines/jdk1.8.0_25.jdk/Contents/Home/jre/lib/security/cacerts -storepass changeit -noprompt -alias startcom.ca.sub.class2 -file sub.class2.server.ca.crt</span><br><span class="line"></span><br><span class="line">sudo keytool -<span class="keyword">import</span> -trustcacerts -keystore /Library/Java/JavaVirtualMachines/jdk1.8.0_25.jdk/Contents/Home/jre/lib/security/cacerts -storepass changeit -noprompt -alias startcom.ca.sub.class3 -file sub.class3.server.ca.crt</span><br><span class="line"></span><br><span class="line">sudo keytool -<span class="keyword">import</span> -trustcacerts -keystore /Library/Java/JavaVirtualMachines/jdk1.8.0_25.jdk/Contents/Home/jre/lib/security/cacerts -storepass changeit -noprompt -alias startcom.ca.sub.class4 -file sub.class4.server.ca.crt</span><br></pre></td></tr></table></figure>
<p>别奇怪，”changeit” 只是个默认密码而已。</p>
<p>最后，验证一下导入是否成功：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -keystore <span class="string">"/Library/Java/JavaVirtualMachines/jdk1.8.0_25.jdk/Contents/Home/jre/lib/security/cacerts"</span> -storepass changeit -list | grep start</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">startcom.ca, <span class="number">2015</span>-<span class="number">11</span>-<span class="number">3</span>, trustedCertEntry,</span><br><span class="line">startcom.ca.sub.class4, <span class="number">2015</span>-<span class="number">11</span>-<span class="number">3</span>, trustedCertEntry,</span><br><span class="line">startcom.ca.sub.class3, <span class="number">2015</span>-<span class="number">11</span>-<span class="number">3</span>, trustedCertEntry,</span><br><span class="line">startcom.ca.sub.class2, <span class="number">2015</span>-<span class="number">11</span>-<span class="number">3</span>, trustedCertEntry,</span><br><span class="line">startcom.ca.sub.class1, <span class="number">2015</span>-<span class="number">11</span>-<span class="number">3</span>, trustedCertEntry,</span><br></pre></td></tr></table></figure>
<p>It’s OK!</p>
]]></content:encoded>
      <comments>http://fyun.li/2015/11/03/import-startssl-into-jre/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[Ubuntu环境配置速记]]></title>
      <link>http://fyun.li/2015/09/22/ubuntu-devenv-note/</link>
      <guid>http://fyun.li/2015/09/22/ubuntu-devenv-note/</guid>
      <pubDate>Tue, 22 Sep 2015 12:20:20 GMT</pubDate>
      <description>
      <![CDATA[<h1 id="一、安装_openssh">一、安装 openssh</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure>
<h1 id="二、安装_mysql">二、安装 mysql</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server mysql-client</span><br></pre></td></tr></table></figure>]]>
      
      </description>
      <content:encoded><![CDATA[<h1 id="一、安装_openssh">一、安装 openssh</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure>
<h1 id="二、安装_mysql">二、安装 mysql</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server mysql-client</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="三、安装_java">三、安装 java</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-software-properties&#10;sudo add-apt-repository ppa:webupd8team/java&#10;sudo apt-get update&#10;sudo apt-get install oracle-java8-installer</span><br></pre></td></tr></table></figure>
<h1 id="四、安装_Tomcat">四、安装 Tomcat</h1><h2 id="1、创建_tomcat_用户">1、创建 tomcat 用户</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd tomcat&#10;sudo useradd -s /bin/false -g tomcat -d /opt/tomcat tomcat</span><br></pre></td></tr></table></figure>
<h2 id="2、下载_tomcat_并解压">2、下载 tomcat 并解压</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /opt&#10;sudo wget http://www.apache.org/dist/tomcat/tomcat-8/v8.0.26/bin/apache-tomcat-8.0.26.tar.gz&#10;sudo tar -xvf apache-tomcat-8.0.26.tar.gz</span><br></pre></td></tr></table></figure>
<h2 id="3、修改_tomcat_目录权限">3、修改 tomcat 目录权限</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R tomcat:tomcat /opt/apache-tomcat-8.0.26</span><br></pre></td></tr></table></figure>
<h2 id="4、设置环境变量">4、设置环境变量</h2><p>编辑 /etc/environment，在末尾添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=&#34;/usr/lib/jvm/java-8-oracle&#34;&#10;CATALINA_HOME=&#34;/opt/apache-tomcat-8.0.26&#34;</span><br></pre></td></tr></table></figure>
<h2 id="5、测试安装结果">5、测试安装结果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /opt/apache-tomcat-8.0.26/bin/startup.sh</span><br></pre></td></tr></table></figure>
<p>控制台输出以下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Using CATALINA_BASE:   /opt/apache-tomcat-8.0.26&#10;Using CATALINA_HOME:   /opt/apache-tomcat-8.0.26&#10;Using CATALINA_TMPDIR: /opt/apache-tomcat-8.0.26/temp&#10;Using JRE_HOME:        /usr&#10;Using CLASSPATH:       /opt/apache-tomcat-8.0.26/bin/bootstrap.jar:/opt/apache-tomcat-8.0.26/bin/tomcat-juli.jar&#10;Tomcat started.</span><br></pre></td></tr></table></figure>
<p>打开浏览器访问 <a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a></p>
<h1 id="五、开机启动_tomcat">五、开机启动 tomcat</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/init/tomcat.conf</span><br></pre></td></tr></table></figure>
<p>内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">description &#34;Tomcat Server&#34;&#10;&#10;start on runlevel [2345]&#10;stop on runlevel [!2345]&#10;respawn&#10;respawn limit 10 5&#10;&#10;setuid tomcat&#10;setgid tomcat&#10;&#10;env JAVA_HOME=/usr/lib/jvm/java-8-oracle&#10;env CATALINA_HOME=/opt/apache-tomcat-8.0.26&#10;&#10;# Modify these options as needed&#10;env JAVA_OPTS=&#34;-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom&#34;&#10;env CATALINA_OPTS=&#34;-Xms512M -Xmx1024M -server -XX:+UseParallelGC&#34;&#10;&#10;exec $CATALINA_HOME/bin/catalina.sh run&#10;&#10;# cleanup temp directory after stop&#10;post-stop script&#10;    rm -rf $CATALINA_HOME/temp/*&#10;end script</span><br></pre></td></tr></table></figure>
<p>重载配置并启动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo initctl reload-configuration&#10;sudo initctl start tomcat</span><br></pre></td></tr></table></figure>
<h1 id="六、启动多个_Tomcat_实例">六、启动多个 Tomcat 实例</h1><h2 id="1、建立新的_tomcat_实例目录_tomcat1，并复制必要的文件:">1、建立新的 tomcat 实例目录 tomcat1，并复制必要的文件:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /opt/tomcat-instance/tomcat1&#10;cd /opt/tomcat-instance/tomcat1&#10;sudo cp -r /opt/apache-tomcat-8.0.26/conf conf&#10;sudo cp -r /opt/apache-tomcat-8.0.26/webapps webapps&#10;sudo mkdir logs&#10;sudo mkdir temp</span><br></pre></td></tr></table></figure>
<h2 id="2、修改_tomcat1_目录权限">2、修改 tomcat1 目录权限</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R tomcat:tomcat /opt/tomcat-instance/tomcat1</span><br></pre></td></tr></table></figure>
<h2 id="3、修改端口设置">3、修改端口设置</h2><p>打开 server.xml 配置文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /opt/tomcat-instance/tomcat1/conf/server.xml</span><br></pre></td></tr></table></figure>
<p>找到以下几行，修改对应的端口后，使之与其他的 server 端口不冲突：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;Server port=&#34;8005&#34; shutdown=&#34;SHUTDOWN&#34;&#62;&#10;...&#10;&#60;Connector port=&#34;8080&#34; protocol=&#34;HTTP/1.1&#34;&#10;               connectionTimeout=&#34;20000&#34;&#10;               redirectPort=&#34;8443&#34; /&#62;&#10;...&#10;&#60;Connector port=&#34;8009&#34; protocol=&#34;AJP/1.3&#34; redirectPort=&#34;8443&#34; /&#62;</span><br></pre></td></tr></table></figure>
<h2 id="4、编辑启动/停止脚本">4、编辑启动/停止脚本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi startup.sh</span><br></pre></td></tr></table></figure>
<p>内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#! /bin/sh&#10;export CATALINA_BASE=&#34;/opt/tomcat-instance/tomcat1&#34;&#10;exec &#34;/opt/apache-tomcat-8.0.26/bin/startup.sh&#34;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi shutdown.sh</span><br></pre></td></tr></table></figure>
<p>内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#! /bin/sh&#10;export CATALINA_BASE=&#34;/opt/tomcat-instance/tomcat1&#34;&#10;exec &#34;/opt/apache-tomcat-8.0.26/bin/shutdown.sh&#34;</span><br></pre></td></tr></table></figure>
<p>设置权限</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown tomcat/tomcat *.sh&#10;sudo chmod +x *.sh</span><br></pre></td></tr></table></figure>
<p>开机启动这个副本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">description &#34;Tomcat Server 1&#34;&#10;&#10;start on runlevel [2345]&#10;stop on runlevel [!2345]&#10;respawn&#10;respawn limit 10 5&#10;&#10;setuid tomcat&#10;setgid tomcat&#10;&#10;env JAVA_HOME=/usr/lib/jvm/java-8-oracle&#10;env CATALINA_HOME=/opt/tomcat&#10;&#10;# Modify these options as needed&#10;env JAVA_OPTS=&#34;-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom&#34;&#10;env CATALINA_OPTS=&#34;-Xms512M -Xmx1024M -XX:MaxPermSize=256m -server -XX:+UseParallelGC&#34;&#10;&#10;env CATALINA_BASE=/opt/tomcat-instance/tomcat1&#10;&#10;exec $CATALINA_HOME/bin/catalina.sh run&#10;&#10;# cleanup temp directory after stop&#10;post-stop script&#10;    rm -rf $CATALINA_BASE/temp/*&#10;end script</span><br></pre></td></tr></table></figure>
<h2 id="5、更多实例">5、更多实例</h2><p>需要建立更多实例，只需要复制 tomcat1 并修改对应的 server.xml 和启动脚本 CATALINA_BASE 设置。</p>
<h1 id="七、安装_nginx">七、安装 nginx</h1><h2 id="1、使用_apt-get_安装_nginx">1、使用 apt-get 安装 nginx</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure>
<h2 id="2、配置_nginx_反向代理负载均衡_tomcat">2、配置 nginx 反向代理负载均衡 tomcat</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upstream tomcat-server &#123;&#10;    server 127.0.0.1:8080 weight=10;&#10;    server 127.0.0.1:8081 weight=10;&#10;&#125;&#10;&#10;server &#123;&#10;&#9;listen 80 default_server;&#10;&#9;listen [::]:80 default_server ipv6only=on;&#10;&#10;&#9;root /usr/share/nginx/html;&#10;&#9;index index.html index.htm;&#10;&#10;&#9;# Make site accessible from http://localhost/&#10;&#9;server_name localhost;&#10;&#10;&#9;location / &#123;&#10;&#9;&#9;proxy_pass http://tomcat-server;&#10;&#9;&#9;proxy_set_header  X-Real-IP  $remote_addr;&#10;&#9;&#9;proxy_set_header Host $host;&#10;&#9;&#9;proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&#10;&#9;&#9;proxy_set_header X-Forwarded-Proto  $scheme;&#10;&#9;&#9;proxy_pass_request_headers on;&#10;&#9;&#9;proxy_pass_request_body on;&#10;&#9;&#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
<h1 id="八、配置iptables开放指定的端口">八、配置iptables开放指定的端口</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#&#20801;&#35768;&#26412;&#22320;&#22238;&#29615;&#25509;&#21475;(&#21363;&#36816;&#34892;&#26412;&#26426;&#35775;&#38382;&#26412;&#26426;)&#10;iptables -A INPUT -i lo -j ACCEPT&#10;# &#20801;&#35768;&#24050;&#24314;&#31435;&#30340;&#25110;&#30456;&#20851;&#36830;&#30340;&#36890;&#34892;&#10;iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT&#10;#&#20801;&#35768;&#25152;&#26377;&#26412;&#26426;&#21521;&#22806;&#30340;&#35775;&#38382;&#10;iptables -A OUTPUT -j ACCEPT&#10;# &#20801;&#35768;&#35775;&#38382;22&#31471;&#21475;&#10;iptables -A INPUT -p tcp --dport 22 -j ACCEPT&#10;#&#20801;&#35768;&#35775;&#38382;80&#31471;&#21475;&#10;iptables -A INPUT -p tcp --dport 80 -j ACCEPT&#10;#&#20801;&#35768;FTP&#26381;&#21153;&#30340;21&#21644;20&#31471;&#21475;&#10;iptables -A INPUT -p tcp --dport 21 -j ACCEPT&#10;iptables -A INPUT -p tcp --dport 20 -j ACCEPT&#10;#&#22914;&#26524;&#26377;&#20854;&#20182;&#31471;&#21475;&#30340;&#35805;&#65292;&#35268;&#21017;&#20063;&#31867;&#20284;&#65292;&#31245;&#24494;&#20462;&#25913;&#19978;&#36848;&#35821;&#21477;&#23601;&#34892;&#10;#&#20801;&#35768;ping&#10;iptables -A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT&#10;#&#31105;&#27490;&#20854;&#20182;&#26410;&#20801;&#35768;&#30340;&#35268;&#21017;&#35775;&#38382;&#10;iptables -A INPUT -j REJECT  #&#65288;&#27880;&#24847;&#65306;&#22914;&#26524;22&#31471;&#21475;&#26410;&#21152;&#20837;&#20801;&#35768;&#35268;&#21017;&#65292;SSH&#38142;&#25509;&#20250;&#30452;&#25509;&#26029;&#24320;&#12290;&#65289;&#10;iptables -A FORWARD -j REJECT</span><br></pre></td></tr></table></figure>
]]></content:encoded>
      <comments>http://fyun.li/2015/09/22/ubuntu-devenv-note/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[javascript 跨域问题小记]]></title>
      <link>http://fyun.li/2015/05/15/js-cross-domain-request/</link>
      <guid>http://fyun.li/2015/05/15/js-cross-domain-request/</guid>
      <pubDate>Thu, 14 May 2015 16:00:00 GMT</pubDate>
      <description>
      <![CDATA[<h1 id="1、同源策略">1、同源策略</h1><p>同源策略是有 Netscape 提出的一个著名的安全策略，现在所有的支持 javascript 的浏览器都会使用这个策略。</p>
<p>所谓同源是指主机名、协议、端口相同：</p>
<ul>
<li>相同的主机名</li>
<li>相同的协议</li>
<li>相同的端口</li>
</ul>
<p>三者必须同时满足，只要主机名、协议、端口三者其中之一不同，就为不同的源。</p>]]>
      
      </description>
      <content:encoded><![CDATA[<h1 id="1、同源策略">1、同源策略</h1><p>同源策略是有 Netscape 提出的一个著名的安全策略，现在所有的支持 javascript 的浏览器都会使用这个策略。</p>
<p>所谓同源是指主机名、协议、端口相同：</p>
<ul>
<li>相同的主机名</li>
<li>相同的协议</li>
<li>相同的端口</li>
</ul>
<p>三者必须同时满足，只要主机名、协议、端口三者其中之一不同，就为不同的源。</p>
<a id="more"></a>
<p>同源策略限制了一个源中加载文本或者脚本与来自其他源中资源的交互方式，简而言之就是一个源上的 js 只能访问当前源的资源。</p>
<p>同源策略以源为边界，把资源分隔开，从而保护用户的信息安全。</p>
<h1 id="2、跨域的方式">2、跨域的方式</h1><p>那么，在如今微服务兴起的情况下，往往很多业务调用必须跨越同源限制。比如，某商城服务部署在 www.xmall.com，而其支付服务可能部署在 www.xpay.com，因此必须要有方式可以绕过同源策略这堵墙。</p>
<p>常用的 js 跨域方式主要有：</p>
<ul>
<li>修改 document.domain 跨子域</li>
<li>通过 jsonp 跨域</li>
<li>通过 html5 的 window.postMessage 跨域</li>
<li>通过 CORS 跨域</li>
</ul>
<p>另外，还可以通过 iframe + window.name 或者 iframe + window.location.hash 进行跨域。</p>
<p>以下涉及示例均使用 <a href="http://www.aaa.com/a.html" target="_blank" rel="external">http://www.aaa.com/a.html</a> 跨域访问 <a href="http://www.bbb.com/b.html" target="_blank" rel="external">http://www.bbb.com/b.html</a> 的数据。</p>
<h1 id="3、修改_document-domain_跨子域">3、修改 document.domain 跨子域</h1><p>www.aaa.com 和 pay.aaa.com 是不同域的，要使他们可以跨域访问，可以通过修改 document.domain 来实现。即在两个页面中都设置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.domain = &#34;aaa.com&#34;;</span><br></pre></td></tr></table></figure>
<p>这里有个限制就是，document.domain 只能向父域修改，也就是说 www.aaa.com 改为 aaa.com 是允许的，但 aaa.com 改为 www.abc.xyz 则是不被允许的。这也限制了修改 document.domain 方式只能用于跨子域访问。</p>
<h1 id="4、通过_jsonp_跨域">4、通过 jsonp 跨域</h1><p>js 脚本的“源”与它存储的地址无关，而是取决于脚本被加载的页面。例如我们在 <a href="http://www.aaa.com/a.html" target="_blank" rel="external">http://www.aaa.com/a.html</a> 中引入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;script src=&#34;http://cdn.staticfile.org/jquery/1.11.1/jquery.min.js&#34;&#62;&#60;/script&#62;</span><br></pre></td></tr></table></figure>
<p>那么脚本与 a.html 页面是同源的，也就是说，脚本的源是 <a href="http://www.aaa.com" target="_blank" rel="external">http://www.aaa.com</a>.</p>
<p>PS: 除了 script, img, iframe, link 等都具有跨域加载资源的能力。</p>
<p>jsonp 正是利用 script 标签没有跨域限制的特性，通过在 src 的 url 的参数上附加回调函数名字，然后服务器接收回调函数名字并返回一个包含数据的回调函数。</p>
<p>如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;script&#62;&#10;function callback(data) &#123;&#10;    alert(data.message);&#10;&#125;&#10;&#60;/script&#62;&#10;&#60;script src=&#34;http://www.bbb.com/b.html?callback=callback&#34;&#62;&#60;/script&#62;</span><br></pre></td></tr></table></figure>
<p>我们只要服务器端 b.html 输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">callback(&#123;&#34;message&#34;:&#34;test jsonp ok&#34;&#125;)</span><br></pre></td></tr></table></figure>
<p>页面即会执行并弹出 “test jsonp ok”。</p>
<p>jQuery 对此做了很好的支持：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;&#10;    url:&#39;http://www.bbb.com/b.html&#39;,&#10;    dataType:&#34;jsonp&#34;,&#10;    jsonp:&#34;callback&#34;,&#10;    success:function(data)&#123;&#10;        // callback logic&#10;    &#125;&#10;&#125;);&#10;&#10;// &#25110;&#32773;&#31616;&#21270;&#26041;&#24335;&#10;$.getJSON(&#34;http://www.bbb.com/b.html?callback=?&#34;, null, &#10;    function(data) &#123;&#10;        // callback logic&#10;    &#125;&#10;&#125;);</span><br></pre></td></tr></table></figure>
<p><strong> <span style="color:red">需要特别强调的是，jsonp 方式只能用于 GET 方法！ </span></strong></p>
<h1 id="5、通过html5_window-postMessage_进行跨域">5、通过html5 window.postMessage 进行跨域</h1><p>假设在a.html里嵌套个</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;iframe src=&#34;http://www.bbbb.com/b.html&#34; frameborder=&#34;0&#34;&#62;&#60;/iframe&#62;</span><br></pre></td></tr></table></figure>
<p>在这两个页面里互相通信</p>
<p>a.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.onload = function() &#123;&#10;    window.addEventListener(&#34;message&#34;, function(e) &#123;&#10;        alert(e.data);&#10;    &#125;);&#10;&#10;    window.frames[0].postMessage(&#34;b data&#34;, &#34;http://www.b.com/b.html&#34;);&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>b.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.onload = function() &#123;&#10;    window.addEventListener(&#34;message&#34;, function(e) &#123;&#10;        alert(e.data);&#10;    &#125;);&#10;    window.parent.postMessage(&#34;a data&#34;, &#34;http://www.a.com/a.html&#34;);&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样打开 a.html 页面就先弹出 a data,再弹出 b data.</p>
<h1 id="6、通过_CORS_进行跨域">6、通过 CORS 进行跨域</h1><p>CORS 是W3C XMLHttpRequest Level 2 里规定的一种跨域方式。CORS 规范请参考 <a href="http://www.w3.org/TR/cors/" target="_blank" rel="external">CORS 规范</a> </p>
<p>CORS 旨在定义一种规范让浏览器在接收到从提供者获取的资源时能够正决定是否应该将此资源分发给消费者作进一步处理。CROS利用资源提供者的显式授权来决定目标资源是否应该与消费者共享。换句话说，浏览器需要得到提供者的授权之后才会将其提供的资源分发给消费者。那么，资源的提供者如何进行资源的授权，并将授权的结果告诉浏览器呢？</p>
<p>一个 CORS 请求大致过程如下：</p>
<ol>
<li><p>消费者发送一个 Origin 报头到提供者端：Origin: <a href="http://www.bbb.com；" target="_blank" rel="external">http://www.bbb.com；</a></p>
</li>
<li><p>提供者发送一个 Access-Control-Allow-Origin 响应报头给消费者，如果值为 * 或 Origin 对应的站点，则表示同意共享资源给消费者，如果值为 null 或者不存在 Access-Control-Allow-Origin 报头，则表示不同意共享资源给消费者；</p>
</li>
<li><p>浏览器根据提供者的响应报文判断是否允许消费者跨域访问到提供者源。</p>
</li>
</ol>
<p>例如，一个Servlet C0RS响应图示如下：</p>
<p><img src="http://ww4.sinaimg.cn/large/620f1e7egw1exdpypjjvbj20pr0h8wl4.jpg" alt=""></p>
<p>CORS 是在支持这个规范的浏览器里，javascript 的写法和不跨域的 ajax 写法一模一样。</p>
<h2 id="6-1、CORS_的浏览器支持">6.1、CORS 的浏览器支持</h2><p><img src="http://ww3.sinaimg.cn/large/620f1e7egw1exdkvr5yw0j20se09ltby.jpg" alt="Cors Browser Support"></p>
<h2 id="6-2、CORS_的服务器端配置">6.2、CORS 的服务器端配置</h2><h3 id="6-2-1_Apache">6.2.1 Apache</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Header set Access-Control-Allow-Origin &#34;*&#34;</span><br></pre></td></tr></table></figure>
<h3 id="6-2-2_Nginx">6.2.2 Nginx</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#&#10;# Wide-open CORS config for nginx&#10;#&#10;location / &#123;&#10;     if ($request_method = &#39;OPTIONS&#39;) &#123;&#10;        add_header &#39;Access-Control-Allow-Origin&#39; &#39;*&#39;;&#10;        #&#10;        # Om nom nom cookies&#10;        #&#10;        add_header &#39;Access-Control-Allow-Credentials&#39; &#39;true&#39;;&#10;        add_header &#39;Access-Control-Allow-Methods&#39; &#39;GET, POST, OPTIONS&#39;;&#10;        #&#10;        # Custom headers and headers various browsers *should* be OK with but aren&#39;t&#10;        #&#10;        add_header &#39;Access-Control-Allow-Headers&#39; &#39;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&#39;;&#10;        #&#10;        # Tell client that this pre-flight info is valid for 20 days&#10;        #&#10;        add_header &#39;Access-Control-Max-Age&#39; 1728000;&#10;        add_header &#39;Content-Type&#39; &#39;text/plain charset=UTF-8&#39;;&#10;        add_header &#39;Content-Length&#39; 0;&#10;        return 204;&#10;     &#125;&#10;     if ($request_method = &#39;POST&#39;) &#123;&#10;        add_header &#39;Access-Control-Allow-Origin&#39; &#39;*&#39;;&#10;        add_header &#39;Access-Control-Allow-Credentials&#39; &#39;true&#39;;&#10;        add_header &#39;Access-Control-Allow-Methods&#39; &#39;GET, POST, OPTIONS&#39;;&#10;        add_header &#39;Access-Control-Allow-Headers&#39; &#39;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&#39;;&#10;     &#125;&#10;     if ($request_method = &#39;GET&#39;) &#123;&#10;        add_header &#39;Access-Control-Allow-Origin&#39; &#39;*&#39;;&#10;        add_header &#39;Access-Control-Allow-Credentials&#39; &#39;true&#39;;&#10;        add_header &#39;Access-Control-Allow-Methods&#39; &#39;GET, POST, OPTIONS&#39;;&#10;        add_header &#39;Access-Control-Allow-Headers&#39; &#39;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&#39;;&#10;     &#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-2-3_ExpressJS">6.2.3 ExpressJS</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(function(req, res, next) &#123;&#10;  res.header(&#34;Access-Control-Allow-Origin&#34;, &#34;*&#34;);&#10;  res.header(&#34;Access-Control-Allow-Headers&#34;, &#34;Origin, X-Requested-With, Content-Type, Accept&#34;);&#10;  next();&#10;&#125;);&#10;&#10;app.get(&#39;/&#39;, function(req, res, next) &#123;&#10;  // Handle the get for this route&#10;&#125;);&#10;&#10;app.post(&#39;/&#39;, function(req, res, next) &#123;&#10; // Handle the post for this route&#10;&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="6-2-4_Tomcat">6.2.4 Tomcat</h3><p>Tomcat 7.0.41 版本之后提供了一个 CorsFilter 以支持 CORS，详情猛击</p>
<p><a href="http://tomcat.apache.org/tomcat-7.0-doc/config/filter.html#CORS_Filter" target="_blank" rel="external">http://tomcat.apache.org/tomcat-7.0-doc/config/filter.html#CORS_Filter</a></p>
<p>下面是一段最简单的 CORS 配置:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;filter&#62;&#10;  &#60;filter-name&#62;CorsFilter&#60;/filter-name&#62;&#10;  &#60;filter-class&#62;org.apache.catalina.filters.CorsFilter&#60;/filter-class&#62;&#10;&#60;/filter&#62;&#10;&#60;filter-mapping&#62;&#10;  &#60;filter-name&#62;CorsFilter&#60;/filter-name&#62;&#10;  &#60;url-pattern&#62;/*&#60;/url-pattern&#62;&#10;&#60;/filter-mapping&#62;</span><br></pre></td></tr></table></figure>
<p>如果希望自己实现一个 CORS 过滤器，可参考 tomcat 的实现或者下面这个链接：</p>
<p><a href="https://github.com/eBay/cors-filter/blob/master/src/main/java/org/ebaysf/web/cors/CORSFilter.java" target="_blank" rel="external">https://github.com/eBay/cors-filter/blob/master/src/main/java/org/ebaysf/web/cors/CORSFilter.java</a></p>
]]></content:encoded>
      <comments>http://fyun.li/2015/05/15/js-cross-domain-request/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[Pentaho CDE生火指南]]></title>
      <link>http://fyun.li/2015/05/02/pentaho-cde/</link>
      <guid>http://fyun.li/2015/05/02/pentaho-cde/</guid>
      <pubDate>Sat, 02 May 2015 09:39:59 GMT</pubDate>
      <description>
      <![CDATA[<h2 id="1、安装CDA、CDE插件">1、安装CDA、CDE插件</h2><p>登录BI Server后菜单Home - Marketplace</p>
<p><img src="http://7xivqe.com1.z0.glb.clouddn.com/2015/05/pentaho-cde-1.png" alt="MarketMenu"></p>]]>
      
      </description>
      <content:encoded><![CDATA[<h2 id="1、安装CDA、CDE插件">1、安装CDA、CDE插件</h2><p>登录BI Server后菜单Home - Marketplace</p>
<p><img src="http://7xivqe.com1.z0.glb.clouddn.com/2015/05/pentaho-cde-1.png" alt="MarketMenu"></p>
<a id="more"></a>
<p>连接server后，显示可安装的插件，选择安装CDA, CDE插件：</p>
<p><img src="http://7xivqe.com1.z0.glb.clouddn.com/2015/05/pentaho-cde-2.png" alt="Marketplace"></p>
<p>PS：最好是安装一个插件就重启一次BI Server，不然控制台有可能报错，：）</p>
<h2 id="2、认识CDE">2、认识CDE</h2><p><img src="http://7xivqe.com1.z0.glb.clouddn.com/2015/05/pentaho-cde-3.png" alt="CDE"></p>
<p>右上角三个图标分别是布局、组件和数据源</p>
<h2 id="3、创建Dashboard">3、创建Dashboard</h2><h3 id="3-1_Layout">3.1 Layout</h3><p>点击Layout图标，根据布局要求新建布局，如下图：</p>
<p><img src="http://7xivqe.com1.z0.glb.clouddn.com/2015/05/pentaho-cde-4.png" alt="CDE Layout"></p>
<p>CDE默认使用blueprint布局，blueprint采用24列网格化布局，如图panel2, panel3各占50%宽度，则设置span size均为12。</p>
<h3 id="3-2_设置数据源">3.2 设置数据源</h3><p>点击Datasource图标，从左侧选择合适的数据源并填写参数和Query，下图以JDBC连接为例：</p>
<p><img src="http://7xivqe.com1.z0.glb.clouddn.com/2015/05/pentaho-cde-5.png" alt="CDE Datasource"></p>
<p>生产环境SQL连接建议采用JNDI。</p>
<h3 id="3-3_创建组件">3.3 创建组件</h3><p>点击Components图标，点击左侧可用组件创建。</p>
<p>下图为一个折线图组件设置：</p>
<p><img src="http://7xivqe.com1.z0.glb.clouddn.com/2015/05/pentaho-cde-6.png" alt="Line Chart"></p>
<p>设置的属性主要包括</p>
<ul>
<li>Name, Title, Width, Height</li>
<li>Datasource: 使用的数据源，对应Datasource的定义名称</li>
<li>HtmlObject：显示位置，对应Layout的区域名称</li>
</ul>
<p>以下分别为柱状图、饼图设置：</p>
<p><img src="http://7xivqe.com1.z0.glb.clouddn.com/2015/05/pentaho-cde-7.png" alt="Bar Chart"></p>
<p><img src="http://7xivqe.com1.z0.glb.clouddn.com/2015/05/pentaho-cde-8.png" alt="Pie Chart"></p>
<p>驾驶舱稍复杂一些，需要先使用一个Query Componeng输出值到变量，然后驾驶舱组件引用该参数，如下图：</p>
<p><img src="http://7xivqe.com1.z0.glb.clouddn.com/2015/05/pentaho-cde-9.png" alt="Query Component"></p>
<p>注意这里应将Query Component的Priority设置为小于CGG Dial Chart的优先级值（默认5，修改为1或2即可）</p>
<p><img src="http://7xivqe.com1.z0.glb.clouddn.com/2015/05/pentaho-cde-10.png" alt="Dial Chart"></p>
<p>如图所示：</p>
<ul>
<li>Intervals Arrays：设置驾驶舱值域范围</li>
<li>Range Color Array: 设置每段对应的配色</li>
<li>Parameter: 引用Query Component的数据变量设置驾驶舱指针值</li>
</ul>
<h2 id="4_预览Dashboard">4 预览Dashboard</h2><p>点击右上角预览图标：</p>
<p><img src="http://7xivqe.com1.z0.glb.clouddn.com/2015/05/pentaho-cde-11.png" alt="Preview"></p>
<h2 id="5_TroubleShooting">5 TroubleShooting</h2><ul>
<li>CDE显示中文乱码</li>
</ul>
<p>修改Tomcat启动参数，将file.encoding的值由GBK改为utf-8。</p>
<p>具体方法在Tomcat的catalina.bat(linux 为catalina.sh)的JAVA_OPTS中加入-Dfile.encoding 设置为</p>
<pre><code>set JAV<span class="built_in">A_OPTS</span>=<span class="var_expand">%JAVA_OPTS%</span> -Dfile.encoding=UTF-<span class="number">8</span>
</code></pre>]]></content:encoded>
      <comments>http://fyun.li/2015/05/02/pentaho-cde/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[Pentaho Report Designer生火指南]]></title>
      <link>http://fyun.li/2015/05/02/pentaho-report-designer/</link>
      <guid>http://fyun.li/2015/05/02/pentaho-report-designer/</guid>
      <pubDate>Sat, 02 May 2015 09:31:54 GMT</pubDate>
      <description>
      <![CDATA[<h2 id="一、认识Pentaho_Report_Designer">一、认识Pentaho Report Designer</h2><p><img src="http://7xivqe.com1.z0.glb.clouddn.com/2015/05/pentaho-report-1.png" alt="Pentaho Report Designer"></p>]]>
      
      </description>
      <content:encoded><![CDATA[<h2 id="一、认识Pentaho_Report_Designer">一、认识Pentaho Report Designer</h2><p><img src="http://7xivqe.com1.z0.glb.clouddn.com/2015/05/pentaho-report-1.png" alt="Pentaho Report Designer"></p>
<a id="more"></a>
<h2 id="二、设计第一个报表">二、设计第一个报表</h2><h3 id="1、添加数据源">1、添加数据源</h3><p>1、点击右侧Data选项卡添加数据源：</p>
<p><img src="http://7xivqe.com1.z0.glb.clouddn.com/2015/05/pentaho-report-2.png" alt=""></p>
<p>2、在打开的界面中创建一个新的连接：</p>
<p><img src="http://7xivqe.com1.z0.glb.clouddn.com/2015/05/pentaho-report-3.png" alt=""></p>
<p>3、然后新建查询</p>
<p><img src="http://7xivqe.com1.z0.glb.clouddn.com/2015/05/pentaho-report-4.png" alt=""></p>
<p>点击Preview可预览数据</p>
<h3 id="2、设计报表格式">2、设计报表格式</h3><h4 id="2-1_逐行数据显示">2.1 逐行数据显示</h4><p>将数据项拖动到Detail Body区块即可</p>
<p><img src="http://7xivqe.com1.z0.glb.clouddn.com/2015/05/pentaho-report-5.png" alt=""></p>
<h4 id="2-2_增加一个图表">2.2 增加一个图表</h4><p>1、从左侧工具栏将图表拖动到Report Header区域</p>
<p>2、双击图表进去设置属性</p>
<p><img src="http://7xivqe.com1.z0.glb.clouddn.com/2015/05/pentaho-report-6.png" alt=""></p>
<h4 id="2-3_分组">2.3 分组</h4><p>右侧Structure选项卡右键点击Master Report，选择Add Group即可。</p>
<h3 id="3、预览报表">3、预览报表</h3><p>点击预览设计区左上角预览图标进行预览：</p>
<p><img src="http://7xivqe.com1.z0.glb.clouddn.com/2015/05/pentaho-report-7.png" alt=""></p>
<h2 id="三、为报表添加参数">三、为报表添加参数</h2><ul>
<li>右侧Data选项卡下方Parameters - Add Parameter</li>
</ul>
<p><img src="http://7xivqe.com1.z0.glb.clouddn.com/2015/05/pentaho-report-8.png" alt=""></p>
<ul>
<li>打开的界面定义参数：</li>
</ul>
<p><img src="http://7xivqe.com1.z0.glb.clouddn.com/2015/05/pentaho-report-9.png" alt=""></p>
<ul>
<li>数据源中引用参数</li>
</ul>
<p>使用${param}格式嵌入Query中即可，如定义参数名称为category，则类似Query如下</p>
<pre><code><span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">where</span> catagory = ${<span class="keyword">category</span>}</span>
</code></pre><h2 id="四、函数与表达式">四、函数与表达式</h2><p>右侧Data选项卡Functions - Add Function</p>
<p><img src="http://7xivqe.com1.z0.glb.clouddn.com/2015/05/pentaho-report-10.png" alt=""></p>
<p>选择内置的函数，同行选择Running函数做一些聚合计算。</p>
<p>然后点击新建的函数，在下方属性中定义名称及表达式：</p>
<p><img src="http://7xivqe.com1.z0.glb.clouddn.com/2015/05/pentaho-report-11.png" alt=""></p>
<h2 id="五、发布报表">五、发布报表</h2><p>菜单选择File - Publish</p>
<p><img src="http://7xivqe.com1.z0.glb.clouddn.com/2015/05/pentaho-report-12.png" alt=""></p>
<p>然后输入Pentaho BI地址和用户名、密码：</p>
<p><img src="http://7xivqe.com1.z0.glb.clouddn.com/2015/05/pentaho-report-13.png" alt=""></p>
<p>然后填写发布名称、路径等：</p>
<p><img src="http://7xivqe.com1.z0.glb.clouddn.com/2015/05/pentaho-report-14.png" alt=""></p>
<p>点击”OK“等待发布完成。</p>
<p>发布完成后即可在BI Server上浏览报表：</p>
<p><img src="http://7xivqe.com1.z0.glb.clouddn.com/2015/05/pentaho-report-15.png" alt=""></p>
<h2 id="六、项目中引用报表">六、项目中引用报表</h2><ol>
<li>使用Java API调用Pentaho Report Engine直接渲染输出</li>
</ol>
<p>如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	URL urlToReport = <span class="keyword">new</span> URL(<span class="string">"file:"</span> + request.getServletContext().getRealPath(<span class="string">"WEB-INF/report/"</span> + reportFile));</span><br><span class="line"></span><br><span class="line">	ResourceManager manager = <span class="keyword">new</span> ResourceManager();</span><br><span class="line">	manager.registerDefaults();</span><br><span class="line">	Resource res = manager.createDirectly(urlToReport, MasterReport.class);</span><br><span class="line">	MasterReport report = (MasterReport) res.getResource();</span><br><span class="line">	<span class="keyword">if</span> (MapUtils.isNotEmpty(params)) &#123;</span><br><span class="line">		<span class="keyword">for</span> (String key : params.keySet()) &#123;</span><br><span class="line">			report.getParameterValues().put(key, params.get(key));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (<span class="string">"pdf"</span>.equalsIgnoreCase(rendererType)) &#123;</span><br><span class="line">		response.setHeader(<span class="string">"Content-disposition"</span>, <span class="string">"filename="</span> + System.currentTimeMillis() + <span class="string">".pdf"</span>);</span><br><span class="line">		response.setContentType(<span class="string">"application/pdf"</span>);</span><br><span class="line">		PdfReportUtil.createPDF(report, response.getOutputStream());</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		response.getWriter().write(<span class="string">"不支持的报表格式！"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">		response.getWriter().write(<span class="string">"报表生成失败！"</span>);</span><br><span class="line">	&#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">		e1.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>通过BI Server的URL进行嵌入</li>
</ol>
<p>URL格式如下：</p>
<pre><code><span class="symbol">http:</span>/<span class="regexp">/10.142.80.231:8080/pentaho</span><span class="regexp">/api/repos</span><span class="regexp">/%3Ademo%3Abtopic2.prpt/report</span>
</code></pre><h2 id="七、TroubleShooting">七、TroubleShooting</h2><ul>
<li>PDF格式中文乱码问题</li>
</ul>
<p>对中文元素使用设置为中文字体，如宋体等。</p>
<ul>
<li>引用Report地址，Pentaho BI Server弹出框要求输入用户名，密码</li>
</ul>
<p>修改pentaho-solutions/system/applicationContext-spring-security.xml，在filterChainProxy中api, plugin对应增加requestParameterProcessingFilter。修改后如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"filterChainProxy"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.security.util.FilterChainProxy"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"filterInvocationDefinitionSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">value</span>&gt;</span></span><br><span class="line">      <span class="cdata">&lt;![CDATA[CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON</span><br><span class="line">      PATTERN_TYPE_APACHE_ANT</span><br><span class="line">      /webservices/**=securityContextHolderAwareRequestFilterForWS,httpSessionPentahoSessionContextIntegrationFilter,httpSessionContextIntegrationFilter,basicProcessingFilter,anonymousProcessingFilter,exceptionTranslationFilterForWS,filterInvocationInterceptorForWS</span><br><span class="line">      /api/**=securityContextHolderAwareRequestFilterForWS,httpSessionPentahoSessionContextIntegrationFilter,httpSessionContextIntegrationFilter,requestParameterProcessingFilter,basicProcessingFilter,anonymousProcessingFilter,exceptionTranslationFilterForWS,filterInvocationInterceptorForWS</span><br><span class="line">      /plugin/**=securityContextHolderAwareRequestFilterForWS,httpSessionPentahoSessionContextIntegrationFilter,httpSessionContextIntegrationFilter,requestParameterProcessingFilter,basicProcessingFilter,anonymousProcessingFilter,exceptionTranslationFilterForWS,filterInvocationInterceptorForWS</span><br><span class="line">      /**=securityContextHolderAwareRequestFilter,httpSessionPentahoSessionContextIntegrationFilter,httpSessionContextIntegrationFilter,httpSessionReuseDetectionFilter,logoutFilter,authenticationProcessingFilter,basicProcessingFilter,requestParameterProcessingFilter,anonymousProcessingFilter,exceptionTranslationFilter,filterInvocationInterceptor]]&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content:encoded>
      <comments>http://fyun.li/2015/05/02/pentaho-report-designer/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[Pentaho BI Server 5.1生火指南]]></title>
      <link>http://fyun.li/2015/05/02/pentaho-bi-server/</link>
      <guid>http://fyun.li/2015/05/02/pentaho-bi-server/</guid>
      <pubDate>Sat, 02 May 2015 08:58:14 GMT</pubDate>
      <description>
      <![CDATA[<h2 id="一、BI_SERVER安装">一、BI SERVER安装</h2><ol>
<li><p>安装JDK 1.6+</p>
</li>
<li><p>解压biserver-ce-5.1.0.0-752</p>
</li>
<li><p>启动start-pentaho.bat</p>
</li>
<li><p>访问BI SERVER</p>
<p> 启动界面出现Pentaho BI平台服务器就绪后，浏览器打开</p>
<p> <a href="http://localhost:8080/pentaho">http://localhost:8080/pentaho</a></p>
<p> <img src="http://7xivqe.com1.z0.glb.clouddn.com/2015/05/pentaho-server.png" alt="Pentaho BI Server"></p>
</li>
</ol>]]>
      
      </description>
      <content:encoded><![CDATA[<h2 id="一、BI_SERVER安装">一、BI SERVER安装</h2><ol>
<li><p>安装JDK 1.6+</p>
</li>
<li><p>解压biserver-ce-5.1.0.0-752</p>
</li>
<li><p>启动start-pentaho.bat</p>
</li>
<li><p>访问BI SERVER</p>
<p> 启动界面出现Pentaho BI平台服务器就绪后，浏览器打开</p>
<p> <a href="http://localhost:8080/pentaho" target="_blank" rel="external">http://localhost:8080/pentaho</a></p>
<p> <img src="http://7xivqe.com1.z0.glb.clouddn.com/2015/05/pentaho-server.png" alt="Pentaho BI Server"></p>
</li>
</ol>
<a id="more"></a>
<h2 id="二、_迁移资料库到ORACLE">二、 迁移资料库到ORACLE</h2><p>Pentaho bi server默认资料库存放在HSQL数据库中，对于小型应用可使用默认配置，对于企业应用则建议迁移到MYSQL, ORACLE等数据库。</p>
<p>PS: 以下文件目录以biserver-ce作为起始目录。</p>
<h3 id="1、创建数据库">1、创建数据库</h3><ol>
<li><p>新建ORACLE数据库，假设为pentaho</p>
</li>
<li><p>使用biserver-ce\data\oracle10g目录内的sql文件创建表空间、用户名及数据表</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlplus sys/password@pentaho as sysdba;&#10;START create_jcr_ora;&#10;&#10;conn sys/password as sysdba;&#10;START create_quartz_ora;&#10;&#10;conn sys/password as sysdba;&#10;START create_repository_ora</span><br></pre></td></tr></table></figure>
<h3 id="2、将Oracle_JDBC驱动ojdbc6-11-2-0-3-jar_Copy到tomcat/lib目录">2、将Oracle JDBC驱动ojdbc6-11.2.0.3.jar Copy到tomcat/lib目录</h3><h3 id="3、修改配置文件">3、修改配置文件</h3><h4 id="3-1_配置Quartz">3.1 配置Quartz</h4><p>修改pentaho-solutions\system\quartz\quartz.properties</p>
<p>将原有内容：</p>
<pre><code>org<span class="class">.quartz</span><span class="class">.jobStore</span><span class="class">.driverDelegateClass</span> = org<span class="class">.quartz</span><span class="class">.impl</span><span class="class">.jdbcjobstore</span><span class="class">.PostgreSQLDelegate</span>
</code></pre><p>替换成：</p>
<pre><code>org<span class="class">.quartz</span><span class="class">.jobStore</span><span class="class">.driverDelegateClass</span> = org<span class="class">.quartz</span><span class="class">.impl</span><span class="class">.jdbcjobstore</span><span class="class">.oracle</span><span class="class">.OracleDelegate</span>
</code></pre><h4 id="3-2_配置Hibernate">3.2 配置Hibernate</h4><h5 id="3-2-1_修改pentaho-solutions\system\applicationContext-spring-security-hibernate-properties">3.2.1 修改pentaho-solutions\system\applicationContext-spring-security-hibernate.properties</h5><p>将原有内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=org.hsqldb.jdbcDriver&#10;jdbc.url=jdbc:hsqldb:hsql://localhost:9001/hibernate&#10;jdbc.username=hibuser&#10;jdbc.password=password&#10;hibernate.dialect=org.hibernate.dialect.HSQLDialect</span><br></pre></td></tr></table></figure>
<p>替换成：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=oracle.jdbc.OracleDriver&#10;jdbc.url=jdbc:oracle:thin:@127.0.0.1:1521:PENTAHO&#10;jdbc.username=hibuser&#10;jdbc.password=password&#10;hibernate.dialect=org.hibernate.dialect.Oracle10gDialect</span><br></pre></td></tr></table></figure>
<h5 id="3-2-2_修改pentaho-solutions\system\hibernate\hibernate-settings-xml">3.2.2 修改pentaho-solutions\system\hibernate\hibernate-settings.xml</h5><p>将原有内容：</p>
<pre><code>&lt;config-file&gt;system/hibernate/mysql5<span class="class">.hibernate</span><span class="class">.cfg</span><span class="class">.xml</span>&lt;/config-file&gt;
</code></pre><p>替换成：</p>
<pre><code>&lt;config-file&gt;system/hibernate/oracle10g<span class="class">.hibernate</span><span class="class">.cfg</span><span class="class">.xml</span>&lt;/config-file&gt;
</code></pre><h5 id="3-2-3_修改pentaho-solutions\system\hibernate\oracle10g-hibernate-cfg-xml">3.2.3 修改pentaho-solutions\system\hibernate\oracle10g.hibernate.cfg.xml</h5><p>修改JDBC连接参数如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;?xml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;?&#62;&#10;&#60;!DOCTYPE hibernate-configuration&#10;  PUBLIC &#34;-//Hibernate/Hibernate Configuration DTD//EN&#34;&#10;  &#34;http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd&#34;&#62;&#10;&#60;hibernate-configuration&#62;&#10;  &#60;session-factory&#62;&#10;  &#10;  &#9;&#60;property name=&#34;cache.provider_class&#34;&#62;net.sf.ehcache.hibernate.SingletonEhCacheProvider&#60;/property&#62;&#10;&#10;    &#60;property name=&#34;hibernate.generate_statistics&#34;&#62;true&#60;/property&#62;&#10;    &#60;property name=&#34;hibernate.cache.use_query_cache&#34;&#62;true&#60;/property&#62;&#10;&#10;    &#60;!--  Oracle 10g Configuration --&#62;&#10;    &#60;property name=&#34;connection.driver_class&#34;&#62;oracle.jdbc.OracleDriver&#60;/property&#62;&#10;    &#60;property name=&#34;connection.url&#34;&#62;jdbc:oracle:thin:@127.0.0.1:1521:PENTAHO&#60;/property&#62;&#10;    &#60;property name=&#34;dialect&#34;&#62;org.hibernate.dialect.Oracle10gDialect&#60;/property&#62;&#10;    &#60;property name=&#34;connection.username&#34;&#62;hibuser&#60;/property&#62;&#10;    &#60;property name=&#34;connection.password&#34;&#62;password&#60;/property&#62;&#10;    &#60;property name=&#34;connection.pool_size&#34;&#62;10&#60;/property&#62;&#10;    &#60;property name=&#34;show_sql&#34;&#62;false&#60;/property&#62;&#10;    &#60;property name=&#34;hibernate.jdbc.use_streams_for_binary&#34;&#62;true&#60;/property&#62;&#10;    &#60;!-- replaces DefinitionVersionManager --&#62;&#10;    &#60;property name=&#34;hibernate.hbm2ddl.auto&#34;&#62;update&#60;/property&#62;&#10;    &#60;!-- load resource from classpath --&#62;&#10;    &#60;mapping resource=&#34;hibernate/oracle10g.hbm.xml&#34; /&#62;&#10;  &#60;/session-factory&#62;&#10;&#60;/hibernate-configuration&#62;</span><br></pre></td></tr></table></figure>
<h4 id="3-3_替换默认Audit_Log">3.3 替换默认Audit Log</h4><p>用pentaho-solutions/system/dialects/oracle10g/audit_sql.xml 替换 pentaho-solutions/system/audit_sql.xml</p>
<h4 id="3-4_配置JackRabbit">3.4 配置JackRabbit</h4><p>修改pentaho-solutions\system\jackrabbit\repository.xml</p>
<p>将</p>
<p>FileSystem、DataStore</p>
<p>Workspace\FileSystem、Workspace\PersistenceManager</p>
<p>Versioning\FileSystem、Versioning\PersistenceManager</p>
<p>几节的配置参数对应修改为Oracle，并修改tablespace原值JACKRABBIT为pentaho_tablespace</p>
<h4 id="3-5_修改JNDI">3.5 修改JNDI</h4><h4 id="3-5-1_tomcat\webapps\pentaho\META-INF\context-xml">3.5.1 tomcat\webapps\pentaho\META-INF\context.xml</h4><p>将原有内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&#62;&#10;&#60;Context path=&#34;/pentaho&#34; docbase=&#34;webapps/pentaho/&#34;&#62;&#10;&#9;&#60;Resource name=&#34;jdbc/Hibernate&#34; auth=&#34;Container&#34; type=&#34;javax.sql.DataSource&#34;&#10;&#9;&#9;factory=&#34;org.apache.commons.dbcp.BasicDataSourceFactory&#34; maxActive=&#34;20&#34; maxIdle=&#34;5&#34;&#10;&#9;&#9;maxWait=&#34;10000&#34; username=&#34;hibuser&#34; password=&#34;password&#34;&#10;&#9;&#9;driverClassName=&#34;org.hsqldb.jdbcDriver&#34; url=&#34;jdbc:hsqldb:hsql://localhost/hibernate&#34;&#10;&#9;&#9;validationQuery=&#34;select count(*) from INFORMATION_SCHEMA.SYSTEM_SEQUENCES&#34; /&#62;&#10;&#9;&#9;&#10;&#9;&#60;Resource name=&#34;jdbc/Quartz&#34; auth=&#34;Container&#34; type=&#34;javax.sql.DataSource&#34;&#10;&#9;&#9;factory=&#34;org.apache.commons.dbcp.BasicDataSourceFactory&#34; maxActive=&#34;20&#34; maxIdle=&#34;5&#34;&#10;&#9;&#9;maxWait=&#34;10000&#34; username=&#34;pentaho_user&#34; password=&#34;password&#34;&#10;&#9;&#9;driverClassName=&#34;org.hsqldb.jdbcDriver&#34; url=&#34;jdbc:hsqldb:hsql://localhost/quartz&#34;&#10;&#9;&#9;validationQuery=&#34;select count(*) from INFORMATION_SCHEMA.SYSTEM_SEQUENCES&#34;/&#62;&#10;&#10;&#60;/Context&#62;</span><br></pre></td></tr></table></figure>
<p>替换成：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&#62;&#10;&#60;Context path=&#34;/pentaho&#34; docbase=&#34;webapps/pentaho/&#34;&#62;&#10;&#9;&#60;Resource name=&#34;jdbc/Hibernate&#34; auth=&#34;Container&#34; type=&#34;javax.sql.DataSource&#34;&#10;&#9;&#9;factory=&#34;org.apache.commons.dbcp.BasicDataSourceFactory&#34; maxActive=&#34;20&#34; maxIdle=&#34;5&#34;&#10;&#9;&#9;maxWait=&#34;10000&#34; username=&#34;hibuser&#34; password=&#34;password&#34;&#10;&#9;&#9;driverClassName=&#34;oracle.jdbc.OracleDriver&#34; url=&#34;jdbc:oracle:thin:@127.0.0.1:1521:PENTAHO&#34;&#10;&#9;&#9;validationQuery=&#34;select 1 from dual&#34; /&#62;&#10;&#9;&#9;&#10;&#9;&#60;Resource name=&#34;jdbc/Quartz&#34; auth=&#34;Container&#34; type=&#34;javax.sql.DataSource&#34;&#10;&#9;&#9;factory=&#34;org.apache.commons.dbcp.BasicDataSourceFactory&#34; maxActive=&#34;20&#34; maxIdle=&#34;5&#34;&#10;&#9;&#9;maxWait=&#34;10000&#34; username=&#34;quartz&#34; password=&#34;password&#34;&#10;&#9;&#9;driverClassName=&#34;oracle.jdbc.OracleDriver&#34; url=&#34;jdbc:oracle:thin:@127.0.0.1:1521:PENTAHO&#34;&#10;&#9;&#9;validationQuery=&#34;select 1 from dual&#34;/&#62;&#10;&#10;&#60;/Context&#62;</span><br></pre></td></tr></table></figure>
<h5 id="3-5-2_删除tomcat\conf\Catalina\localhost\pentaho-xml">3.5.2 删除tomcat\conf\Catalina\localhost\pentaho.xml</h5><h4 id="3-6_修改tomcat\webapps\pentaho\WEB-INF\web-xml，停止HSQL启动">3.6 修改tomcat\webapps\pentaho\WEB-INF\web.xml，停止HSQL启动</h4><p>注释掉以下两段：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;!-- [BEGIN HSQLDB DATABASES] --&#62;&#10;&#60;context-param&#62;&#10;  &#60;param-name&#62;hsqldb-databases&#60;/param-name&#62;&#10;  &#60;param-value&#62;sampledata@../../data/hsqldb/sampledata,hibernate@../../data/hsqldb/hibernate,quartz@../../data/hsqldb/quartz&#60;/param-value&#62;&#10;&#60;/context-param&#62;&#10;&#60;!-- [END HSQLDB DATABASES] --&#62;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;!-- [BEGIN HSQLDB STARTER] --&#62;&#10;&#60;listener&#62;&#10;  &#60;listener-class&#62;org.pentaho.platform.web.http.context.HsqldbStartupListener&#60;/listener-class&#62;&#10;&#60;/listener&#62;&#10;&#60;!-- [END HSQLDB STARTER] --&#62;</span><br></pre></td></tr></table></figure>
<h4 id="3-7_其他">3.7 其他</h4><p>迁移到其他数据库步骤类似，详情可见</p>
<p><a href="http://infocenter.pentaho.com/help/index.jsp?topic=%2Finstall_ziptar%2Ftask_prepare_rdbms_repository.html" target="_blank" rel="external">http://infocenter.pentaho.com/help/index.jsp?topic=%2Finstall_ziptar%2Ftask_prepare_rdbms_repository.html</a></p>
<p><a href="http://infocenter.pentaho.com/help/index.jsp?topic=%2Finstall_manual%2Ftask_configure_rdbms_repository.html" target="_blank" rel="external">http://infocenter.pentaho.com/help/index.jsp?topic=%2Finstall_manual%2Ftask_configure_rdbms_repository.html</a>）</p>
<h3 id="4、处理bi-server自带实例库">4、处理bi-server自带实例库</h3><p>Pentaho BI Server自带实例库数据存放在HSQL中，资料库转移后启动Pentaho BI Server因找不到数据会报错，只需删除实例库即可：</p>
<ul>
<li>删除pentaho_solutions\system\default_content内容</li>
<li>删除pentaho_solutions\system\jackrabbit\repository目录</li>
</ul>
]]></content:encoded>
      <comments>http://fyun.li/2015/05/02/pentaho-bi-server/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[jQuery Plugin Scaffold]]></title>
      <link>http://fyun.li/2012/04/27/jquery-plugin-scaffold/</link>
      <guid>http://fyun.li/2012/04/27/jquery-plugin-scaffold/</guid>
      <pubDate>Fri, 27 Apr 2012 06:21:13 GMT</pubDate>
      <description>
      <![CDATA[<p><strong>The First One:</strong></p>
<pre lang="javascript">(function($) {
    $.fn.joey = function(options) {
        debug(this);

        var opts = $.extend({}, $.fn.joey.defaults, options);

        return this.each(function() {
            $this = $(this);

            // build element specific options
            var o = $.meta ? $.extend({}, opts, $this.data()) : opts;

            // do something
        });
    };

    // private function for debugging
    function debug($obj) {
        if (window.console &amp;&amp; window.console.log)
            window.console.log('joey selection count: ' + $obj.size());
    }
    ;

    // plugin defaults
    $.fn.joey.defaults = {
        // some options
    };

})(jQuery);</pre>]]>
      
      </description>
      <content:encoded><![CDATA[<p><strong>The First One:</strong></p>
<pre lang="javascript">(function($) {
    $.fn.joey = function(options) {
        debug(this);

        var opts = $.extend({}, $.fn.joey.defaults, options);

        return this.each(function() {
            $this = $(this);

            // build element specific options
            var o = $.meta ? $.extend({}, opts, $this.data()) : opts;

            // do something
        });
    };

    // private function for debugging
    function debug($obj) {
        if (window.console &amp;&amp; window.console.log)
            window.console.log('joey selection count: ' + $obj.size());
    }
    ;

    // plugin defaults
    $.fn.joey.defaults = {
        // some options
    };

})(jQuery);</pre>

<a id="more"></a>
<p><strong>The Other One:</strong></p>
<pre lang="javascript">;(function($) {
    $.fn.theplugin = function(options) {
        debug(this);

        var opts = $.extend({}, $.fn.theplugin.defaults, options);

        if (this.length &gt; 1) {
            this.each(function() {
                $(this).theplugin(options)
            });
            return this;
        }

        this.initialize = function() {
            $this = $(this);

            // build element specific options
            var o = $.meta ? $.extend({}, opts, $this.data()) : opts;

            // do something

            return this;
        };

        // public function
        this.foo = function() {
            // do someting
        }

        // private fucntion
        function debug($obj) {
            if (window.console &amp;&amp; window.console.log)
                window.console.log('theplugin selection count: ' + $obj.size());
        }
        ;

        // plugin defaults
        $.fn.theplugin.defaults = {
            // options
        };

        return this.initialize();
    }
})(jQuery);</pre>]]></content:encoded>
      <comments>http://fyun.li/2012/04/27/jquery-plugin-scaffold/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[Macbook Pro精简安装记事]]></title>
      <link>http://fyun.li/2011/06/06/macbook-pro-debut/</link>
      <guid>http://fyun.li/2011/06/06/macbook-pro-debut/</guid>
      <pubDate>Mon, 06 Jun 2011 04:49:15 GMT</pubDate>
      <description>
      <![CDATA[<p>进入微博时代，我的惰性越发泛滥，别说不写博客，几乎瞄都没瞄上两眼。这次借着MACBOOK PRO的新鲜劲儿涂鸦两笔，假装是应<a href="http://weibo.com/melthaw">@<em>dz</em>菠菜_</a>的要求，其实是秀秀装逼感。</p>
<p>话说我上一个本子是T60 2007-FA6，港版的水货本，用到现在已经4岁了，跑起WIN7来跟个破车似地，尤其是动不动就会停顿住那么几十秒抗议我对它的摧残，即使我将内存奢侈地增加到了3G也于事无补。所以，我趁着有预算赶紧折腾着换个新本，基本上是在THINKPAD RW3和MBP MC721ZP之间选择，THINKPAD新款的T420那悲剧性的16：9屏幕和可耻的多点触控板让我毫无犹豫地把他放弃了，而MBP是多么的标致得适合装逼，虽然我加配后MBP要15400HKD，而水THINKPAD只要8200RMB，但是尼玛的MBP是行货，有木有！！！</p>]]>
      
      </description>
      <content:encoded><![CDATA[<p>进入微博时代，我的惰性越发泛滥，别说不写博客，几乎瞄都没瞄上两眼。这次借着MACBOOK PRO的新鲜劲儿涂鸦两笔，假装是应<a href="http://weibo.com/melthaw" target="_blank" rel="external">@<em>dz</em>菠菜_</a>的要求，其实是秀秀装逼感。</p>
<p>话说我上一个本子是T60 2007-FA6，港版的水货本，用到现在已经4岁了，跑起WIN7来跟个破车似地，尤其是动不动就会停顿住那么几十秒抗议我对它的摧残，即使我将内存奢侈地增加到了3G也于事无补。所以，我趁着有预算赶紧折腾着换个新本，基本上是在THINKPAD RW3和MBP MC721ZP之间选择，THINKPAD新款的T420那悲剧性的16：9屏幕和可耻的多点触控板让我毫无犹豫地把他放弃了，而MBP是多么的标致得适合装逼，虽然我加配后MBP要15400HKD，而水THINKPAD只要8200RMB，但是尼玛的MBP是行货，有木有！！！</p>
<a id="more"></a>
<p>取回本子后真的有些爱不释手，绝对标致，多点触控板更是大爱，基本上可以抛弃鼠标愉快地完成一切操作了，操作细节我就不说，嘿嘿。因此，我也就放弃了再配一个Magic Mouse的念想，完全没有必要，顶多继续偶尔用下我那个灵敏度欠奉，时不时还掉线的罗技M555b就行了。</p>
<p>开机初始化后自然是配置网络，配置VPN（我发誓我不经常翻墙的，体力不好），安装除IE外的各系浏览器，安装输入法——我选择的是FUN INPUT TOY。</p>
<p>然后一顿狂找各种软件，MAC APP STORE的收费软件比IOS的要贵不少，看着都肉疼（我为自己说出这话小小地内疚一下），所以我只购买了不超过3款的价格在5刀以下的软件，其它的都是免费的或者破解的（再鄙视一下自己）。</p>
<p>以下是软件列表，有比我更白痴的可以参考：</p>
<p>aMule：电驴，你懂的；</p>
<p>Brew：MAC的apt-get，免费；</p>
<p>FileZilla：FTP客户端，为什么选它，因为它免费；</p>
<p>uTorrent：BT客户端，还是免费；</p>
<p>Speed Download：下载工具，传说是MAC下最好的，我尝试使用免费的folx，但是是在太烂了，而SD太他妈贵了，所以我盗版了——我真的觉得下载工具应该免费的，:P。</p>
<p>iTerm：用以替换系统自带的终端，免费；</p>
<p>CleanMyMac：系统清理，用以清理垃圾，卸载软件不错，盗版的；</p>
<p>Disk Order：MAC下类似TC的工具，貌似盗版，但我好像不用KEY不用破解也能用；</p>
<p>gfxCardStatus：显示显卡状态，并能用以切换集县或独显，免费；</p>
<p>MiniUsage：在任务栏显示系统状况，信息很齐全并能显示占资源最多的十个进程，免费。之前装了个istat menu，搞得任务栏跟花一样，果断扔了；</p>
<p>istat pro：Dashboard中的系统状况查看插件，免费；</p>
<p>HyperDock：让Dock有WIN7一样的预览效果，可点击预览图激活或关闭窗口，我忘了是不是盗版了；</p>
<p>iBackup：系统备份工具，免费；</p>
<p>MyTunesControllerPlus：任务栏图标控制itunes，并能桌面显示歌词，免费；</p>
<p>ntfsMounter：MAC默认只读NTFS格式，其实内置可写的，此工具就是打开写功能，运行后任务栏有个很丑的图表，将NTFS分区挂上去就OK了，免费；</p>
<p>QuickSilver：神器，可以快速查找、启动、各种方式打开你需要的种种，功能和系统自带的Spotlight，Google Quick Search Box有些重叠，免费；</p>
<p>smcFanControl：显示温度和风扇转速，可指令在正常和高转速之间切换，免费；</p>
<p>The Unachiever：比自带的好用，免费；</p>
<p>DropBox：你懂的；</p>
<p>Balsamiq Mockups：原型绘制工具，我有KEY，不算盗版；</p>
<p>Evernote：笔记本，资料管理，免费；</p>
<p>FreeMind：思维导图工具，免费；</p>
<p>iChm：看名字就知道了，免费；</p>
<p>Stanza：看电子书的，免费；</p>
<p>Xee：图片浏览，免费；</p>
<p>MacVim：神器，免费；</p>
<p>Office 2011 for Mac：盗版，不需要注册也能用；</p>
<p>MPlayerX：播放器，免费；</p>
<p>射手播放器：买的，2.99刀；</p>
<p>QQ：不解释；</p>
<p>Twitter for Mac：不解释；</p>
<p>欧陆词典：带屏幕取词，免费；</p>
<p>RDC：远程连接WINDOWS桌面，免费；</p>
<p>Vmware Fusion：虚拟机软件，盗版的；</p>
<p>开发方面安装JAVA、RUBY都很简单，系统有自带的，ECLIPSE直接下载就能用，安装插件和windows一样，就是Subclipse默认只能用SVNKIT，JAVAHL需要安装SVN才有，下载个<a href="http://downloads.open.collab.net/binaries.html" target="_blank" rel="external">openCollabNet</a>版安装就行；</p>
<p>MySQL直接到官网下载安装即可。</p>
<p>UML工具用惯了JUDE，现在改名叫Astah，还是用了这个，跨平台就是好，免费；</p>
<p>其实MAC的软件安装真的超简单，基本上拖拽到应用程序文件夹就成了，package就直接双击安装；</p>
<p>一不小心写了这么长，收工。</p>
]]></content:encoded>
      <comments>http://fyun.li/2011/06/06/macbook-pro-debut/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[修改历史记录]]></title>
      <link>http://fyun.li/2010/06/12/hibernate-history/</link>
      <guid>http://fyun.li/2010/06/12/hibernate-history/</guid>
      <pubDate>Sat, 12 Jun 2010 13:31:28 GMT</pubDate>
      <description>
      <![CDATA[<p>要实现修改历史记录的功能，以前我们可以使用Hibernate Interceptor，hibernate 3.0之后，可以使用Event Listener。</p>
<p>关于这个，已经有其他人阐述过了，请猛击这里：<a href="http://bit.ly/afOs8p]]>
      </description>
      <content:encoded><![CDATA[<p>要实现修改历史记录的功能，以前我们可以使用Hibernate Interceptor，hibernate 3.0之后，可以使用Event Listener。</p>
<p>关于这个，已经有其他人阐述过了，请猛击这里：<a href="http://bit.ly/afOs8p" title="http://bit.ly/afOs8p" target="_blank" rel="external">http://bit.ly/afOs8p</a></p>
]]></content:encoded>
      <comments>http://fyun.li/2010/06/12/hibernate-history/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[AJAX Upload]]></title>
      <link>http://fyun.li/2010/06/02/ajax-upload/</link>
      <guid>http://fyun.li/2010/06/02/ajax-upload/</guid>
      <pubDate>Wed, 02 Jun 2010 12:12:24 GMT</pubDate>
      <description>
      <![CDATA[<p>推荐一下这个<a href="http://valums.com/ajax-upload/">AJAX Upload</a>，基于JQuery，方便快捷，是居家旅行、杀人放火之利器。</p>]]>
      
      </description>
      <content:encoded><![CDATA[<p>推荐一下这个<a href="http://valums.com/ajax-upload/" target="_blank" rel="external">AJAX Upload</a>，基于JQuery，方便快捷，是居家旅行、杀人放火之利器。</p>
<a id="more"></a>
<p><strong>用法：</strong></p>
<p><pre lang="javascript">new AjaxUpload(‘upload_button_id’, {action: ‘upload.php’});</pre><br>前一参数是相应事件的页面元素ID，任何元素都可以，后一个参数是执行上传的URL。</p>
<p><pre lang="javascript">new AjaxUpload(‘#upload_button_id’, {<br>    // 执行上传文件的URL<br>    action: ‘upload.php’,<br>    // 对应传统的input file的名称<br>    name: ‘userfile’,<br>    // 其它要同时post的数据<br>    data: {<br>        example_key1 : ‘example_value’,<br>        example_key2 : ‘example_value2’<br>    },<br>    // 选择文件后自动上传<br>    autoSubmit: true,<br>    // 文件被选择后触发<br>    // Useful when autoSubmit is disabled<br>    // You can return false to cancel upload<br>    // @param file basename of uploaded file<br>    // @param extension of that file<br>    onChange: function(file, extension){},<br>    // 文件被上传完成前触发<br>    // You can return false to cancel upload<br>    // @param file basename of uploaded file<br>    // @param extension of that file<br>    onSubmit: function(file, extension) {},<br>    // 文件上传完成后触发<br>    // @param file basename of uploaded file<br>    // @param response server response<br>    onComplete: function(file, response) {}<br>});</pre><br><strong>原理：</strong></p>
<p>其实简单得要死，不过是偷偷的在背后生成一个iframe，构建一个表单，然后提交就是了。</p>
<p>基本上就这样了，细节自己去官网看吧。</p>
]]></content:encoded>
      <comments>http://fyun.li/2010/06/02/ajax-upload/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[Spring AOP Annotation生火指南]]></title>
      <link>http://fyun.li/2010/05/23/spring-aop-annotation/</link>
      <guid>http://fyun.li/2010/05/23/spring-aop-annotation/</guid>
      <pubDate>Sun, 23 May 2010 10:41:08 GMT</pubDate>
      <description>
      <![CDATA[<p>一者好久没博了，所以写篇凑个数，二者顺便记录一下，催眠我自己的记忆。</p>
<p>AOP，用我们的普通话说就是面向方面变成，实际上是OOP编程的一个补充。说简单点就是实现横切（crosscutting）的工具，可使代码更加模块化，被横切的被称之为关注点。OOP的基本单元是Class，而AOP的基本单元是Aspect。日志、安全、事务等都是一些典型的横切。比如我们最近的一个项目，为了了解程序的性能，就使用了AOP记录一些服务方法的执行时间。</p>]]>
      
      </description>
      <content:encoded><![CDATA[<p>一者好久没博了，所以写篇凑个数，二者顺便记录一下，催眠我自己的记忆。</p>
<p>AOP，用我们的普通话说就是面向方面变成，实际上是OOP编程的一个补充。说简单点就是实现横切（crosscutting）的工具，可使代码更加模块化，被横切的被称之为关注点。OOP的基本单元是Class，而AOP的基本单元是Aspect。日志、安全、事务等都是一些典型的横切。比如我们最近的一个项目，为了了解程序的性能，就使用了AOP记录一些服务方法的执行时间。</p>
<a id="more"></a>
<p><strong>一、概念</strong></p>
<p>1、连接点(join point)：指程序执行过程中的一个特定点，比如方法调用、抛出异常、对象初始化等等，用来定义你的程序在什么地方加入新的逻辑。</p>
<p>2、通知(advice)：特定的连接点出运行的代码称为通知。通知有很多种，比如前置通知、后置通知等。</p>
<p>3、切入点(point cut)：指一个通知该何时执行的一组连接点，典型的切入点如对某个类所有方法调用的集合。</p>
<p>4、方面(aspect)，通知和切入点的组合称为方面，也即定义了程序执行的逻辑以及何时应该被执行。</p>
<p>5、织入(weaving)：方面被加入程序的过程，静态织入一般在编译时进行，而动态织入则在运行时进行，Spring AOP属于动态织入。</p>
<p>6、目标(target)：也就是被aop的对象。</p>
<p>7、引入(introduce)：就是向对象中加入新的属性或方法，比如可以修改它使之实现某个接口。</p>
<p><strong>二、应用</strong></p>
<p><strong>1、使程序支持@Aspect</strong>：</p>
<p>在spring配置文件中加入：</p>
<p>&lt;aop:aspectj-autoproxy/&gt;</p>
<div><strong>2、定义一个方面</strong>：</div><br><pre lang="java">package org.xyz;<br>import org.aspectj.lang.annotation.Aspect;<br><br>@Aspect<br>public class SimpleAspect {<br><br>}</pre><br><div><strong>3、声明一个切入点：</strong></div><br><pre lang="java">@Pointcut(“execution(<em> transfer(..))”) // the pointcut expression<br>private void anyOldTransfer() {} // the pointcut signature</em></pre><br><div><strong>4、Spring AOP支持的切入点表达式</strong>：</div><br><div><br><br>1.  execution - 匹配方法执行连接点，也是使用Spring AOP最常用到的。<br>2.  within - 匹配特定类型，只是为了简化特定类型执行AOP的方法执行声明。<br>3.  this - 连接点必须是指定类型的实例。<br>4.  args - 连接点的参数必须是指定类型的实例。<br>5.  @target - 连接点执行对象类型必须有指定类型的注解(annotation)。<br>6.  @args - 连接点实参的运行时类型必须有指定类型的注解(annotation)。<br>7.  @within - 匹配具有指定注解(annotation)的类型<br>8.  @annotation - 连接点必须有指定的注解(annotaion)<br></div><br><div><strong>5、组合连接点表达式</strong></div><br><div id="_mcePaste">可以用&amp;&amp;, ||, !进行组合</div><br><div><strong>6、声明通知(advice)</strong></div><br><div><strong>1)、前置通知（Before advice）</strong></div><br><div><strong>

</strong></div><br><div id="_mcePaste">一个切面里使用 @Before 注解声明前置通知：</div><br><pre lang="java">import org.aspectj.lang.annotation.Aspect;<br>import org.aspectj.lang.annotation.Before;<br><br>@Aspect<br>public class BeforeExample {<br><br>    @Before(“com.xyz.myapp.SystemArchitecture.dataAccessOperation()”)<br>    public void doAccessCheck() {<br>        // …<br>    }<br><br>}</pre><br><div>如果使用一个in-place 的切入点表达式，我们可以把上面的例子换个写法：</div><br><pre lang="java">import org.aspectj.lang.annotation.Aspect;<br>import org.aspectj.lang.annotation.Before;<br><br>@Aspect<br>public class BeforeExample {<br><br>    @Before(“execution( com.xyz.myapp.dao.<em>.</em>(..))”)<br>    public void doAccessCheck() {<br>        // …<br>    }<br>}</pre><br><div><strong>2)、返回后通知（After returning advice）</strong></div><br><div><strong>

</strong></div><br><div id="_mcePaste">返回后通知通常在一个匹配的方法返回的时候执行。使用 @AfterReturning 注解来声明：</div><br><pre lang="java">import org.aspectj.lang.annotation.Aspect;<br>import org.aspectj.lang.annotation.AfterReturning;<br><br>@Aspect<br>public class AfterReturningExample {<br><br>    @AfterReturning(“com.xyz.myapp.SystemArchitecture.dataAccessOperation()”)<br>    public void doAccessCheck() {<br>        // …<br>    }<br>}</pre><br><div id="_mcePaste">说明：你可以在同一个切面里定义多个通知，或者其他成员。我们只是在展示如何定义一个简单的通知。这些例子主要的侧重点是正在讨论的问题。</div><br><div id="_mcePaste">有时候你需要在通知体内得到返回的值。你可以使用以 @AfterReturning 接口的形式来绑定返回值：</div><br><pre lang="java">import org.aspectj.lang.annotation.Aspect;<br>import org.aspectj.lang.annotation.AfterReturning;<br><br>@Aspect<br>public class AfterReturningExample {<br><br>    @AfterReturning(pointcut=”com.xyz.myapp.SystemArchitecture.dataAccessOperation()”, returning=”retVal”)<br>    public void doAccessCheck(Object retVal) {<br>        // …<br>    }<br>}</pre><br><div id="_mcePaste">在 returning 属性中使用的名字必须对应于通知方法内的一个参数名。 当一个方法执行返回后，返回值作为相应的参数值传入通知方法。 一个 returning 子句也限制了只能匹配到返回指定类型值的方法。 （在本例子中，返回值是 Object 类，也就是说返回任意类型都会匹配）</div><br><div><strong>3)、抛出后通知（After throwing advice）</strong></div><br><div><strong>

</strong></div><br><div id="_mcePaste">抛出后通知在一个方法抛出异常后执行。使用 @AfterThrowing 注解来声明：</div><br><pre lang="java">import org.aspectj.lang.annotation.Aspect;<br>import org.aspectj.lang.annotation.AfterThrowing;<br><br>@Aspect<br>public class AfterThrowingExample {<br><br>    @AfterThrowing(“com.xyz.myapp.SystemArchitecture.dataAccessOperation()”)<br>    public void doRecoveryActions() {<br>        // …<br>    }<br><br>}</pre><br><div id="_mcePaste">你通常会想要限制通知只在某种特殊的异常被抛出的时候匹配，你还希望可以在通知体内得到被抛出的异常。 使用 throwing 属性不光可以限制匹配的异常类型（如果你不想限制，请使用 Throwable 作为异常类型），还可以将抛出的异常绑定到通知的一个参数上。</div><br><pre lang="java">import org.aspectj.lang.annotation.Aspect;<br>import org.aspectj.lang.annotation.AfterThrowing;<br><br>@Aspect<br>public class AfterThrowingExample {<br><br>    @AfterThrowing(pointcut=”com.xyz.myapp.SystemArchitecture.dataAccessOperation()”, throwing=”ex”)<br>    public void doRecoveryActions(DataAccessException ex) {<br>        // …<br>    }<br><br>}</pre><br><div id="_mcePaste">在 throwing 属性中使用的名字必须与通知方法内的一个参数对应。 当一个方法因抛出一个异常而中止后，这个异常将会作为那个对应的参数送至通知方法。 throwing 子句也限制了只能匹配到抛出指定异常类型的方法（上面的示例为 DataAccessException）。</div><br><div><strong>4)、后通知（After (finally) advice）</strong></div><br><div>不论一个方法是如何结束的，在它结束后（finally）后通知（After (finally) advice）都会运行。 使用 @After 注解来声明。这个通知必须做好处理正常返回和异常返回两种情况。通常用来释放资源。</div><br><pre lang="java">import org.aspectj.lang.annotation.Aspect;<br>import org.aspectj.lang.annotation.After;<br><br>@Aspect<br>public class AfterFinallyExample {<br><br>    @After(“com.xyz.myapp.SystemArchitecture.dataAccessOperation()”)<br>    public void doReleaseLock() {<br>        // …<br>    }<br><br>}</pre><br><div><strong>5)、环绕通知（Around Advice</strong>）</div><br><div>最后一种通知是环绕通知。环绕通知在一个方法执行之前和之后执行。 它使得通知有机会既在一个方法执行之前又在执行之后运行。并且，它可以决定这个方法在什么时候执行，如何执行，甚至是否执行。 环绕通知经常在在某线程安全的环境下，你需要在一个方法执行之前和之后共享某种状态的时候使用。 请尽量使用最简单的满足你需求的通知。（比如如果前置通知（before advice）也可以适用的情况下不要使用环绕通知）。</div><br><div id="_mcePaste">环绕通知使用 @Around 注解来声明。通知的第一个参数必须是 ProceedingJoinPoint 类型。 在通知体内，调用 ProceedingJoinPoint 的 proceed() 方法将会导致潜在的连接点方法执行。 proceed 方法也可能会被调用并且传入一个 Object[] 对象-该数组将作为方法执行时候的参数。</div><br><div id="_mcePaste">当传入一个 Object[] 对象的时候，处理的方法与通过AspectJ编译器处理环绕通知略有不同。 对于使用传统AspectJ语言写的环绕通知来说，传入参数的数量必须和传递给环绕通知的参数数量匹配（不是后台的连接点接受的参数数量），并且特定顺序的传入参数代替了将要绑定给连接点的原始值（如果你看不懂不用担心）。 Spring采用的方法更加简单并且更好得和他的基于代理（proxy-based），只匹配执行的语法相适用。 如果你适用AspectJ的编译器和编织器来编译为Spring而写的@AspectJ切面和处理参数，你只需要了解这一区别即可。 有一种方法可以让你写出100%兼容Spring AOP和AspectJ的，我们将会在后续的通知参数（advice parameters）的章节中讨论它。</div><br><pre lang="java">import org.aspectj.lang.annotation.Aspect;<br>import org.aspectj.lang.annotation.Around;<br>import org.aspectj.lang.ProceedingJoinPoint;<br><br>@Aspect<br>public class AroundExample {<br><br>    @Around(“com.xyz.myapp.SystemArchitecture.businessService()”)<br>    public Object doBasicProfiling(ProceedingJoinPoint pjp) throws Throwable {<br>        // start stopwatch<br>        Object retVal = pjp.proceed();<br>        // stop stopwatch<br>        return retVal;<br>    }<br><br>}</pre><br><div id="_mcePaste">方法的调用者得到的返回值就是环绕通知返回的值。 例如：一个简单的缓存切面，如果缓存中有值，就返回该值，否则调用proceed()方法。 请注意proceed可能在通知体内部被调用一次，许多次，或者根本不被调用。</div><br><div><strong>7、通知参数（Advice parameters）</strong></div><br><div>Spring 2.0 提供了完整的通知类型 - 这意味着你可以在通知签名中声明所需的参数，（就像在以前的例子中我们看到的返回值和抛出异常一样）而不总是使用Object[]。 我们将会看到如何在通知体内访问参数和其他上下文相关的值。首先让我们看以下如何编写普通的通知以找出正在被通知的方法。</div><br><div><strong>1)、访问当前的连接点</strong></div><br><div id="_mcePaste">任何通知方法可以将第一个参数定义为 org.aspectj.lang.JoinPoint 类型 （环绕通知需要定义为 ProceedingJoinPoint 类型的， 它是 JoinPoint 的一个子类。） JoinPoint 接口提供了一系列有用的方法， 比如 getArgs()（返回方法参数）、getThis()（返回代理对象）、getTarget()（返回目标）、getSignature()（返回正在被通知的方法相关信息）和 toString()（打印出正在被通知的方法的有用信息）。</div><br><div><strong>2)、传递参数给通知（Advice）</strong></div><br><div id="_mcePaste">我们已经看到了如何绑定返回值或者异常（使用后置通知（after returning）和异常后通知（after throwing advice）。 为了可以在通知（adivce）体内访问参数，你可以使用 args 来绑定。 如果在一个参数表达式中应该使用类型名字的地方使用一个参数名字，那么当通知执行的时候对应的参数值将会被传递进来。 可能给出一个例子会更好理解。假使你想要通知（advise）接受某个Account对象作为第一个参数的DAO操作的执行，你想要在通知体内也能访问到account对象，你可以写如下的代码：</div><br><pre lang="java">@Before(“com.xyz.myapp.SystemArchitecture.dataAccessOperation() &amp;&amp; args(account,..)”)<br>public void validateAccount(Account account) {<br>    // …<br>}</pre><br><div id="_mcePaste">切入点表达式的 args(account,..) 部分有两个目的： 首先它保证了只会匹配那些接受至少一个参数的方法的执行，而且传入的参数必须是 Account 类型的实例， 其次它使得可以在通知体内通过 account 参数来访问那个account参数。</div><br><div id="_mcePaste">另外一个办法是定义一个切入点，这个切入点在匹配某个连接点的时候“提供”了一个Account对象， 然后直接从通知中访问那个命名的切入点。你可以这样写：</div><br><pre lang="java">@Pointcut(“com.xyz.myapp.SystemArchitecture.dataAccessOperation() &amp;&amp; args(account,..)”)<br>private void accountDataAccessOperation(Account account) {}<br><br>@Before(“accountDataAccessOperation(account)”)<br>public void validateAccount(Account account) {<br>  // ..<br>}</pre><br><div id="_mcePaste">如果想要知道更详细的内容，请参阅 AspectJ 编程指南。</div><br><div id="_mcePaste">代理对象（this）、目标对象（target） 和注解（@within, @target, @annotation, @args）都可以用一种简单格式绑定。 以下的例子展示了如何使用 @Auditable 注解来匹配方法执行，并提取AuditCode。</div><br><div id="_mcePaste">首先是 @Auditable 注解的定义：</div><br><pre lang="java">@Retention(RetentionPolicy.RUNTIME)<br>@Target(ElementType.METHOD)<br>public @interface Auditable {<br>    AuditCode value();<br>}</pre><br><div id="_mcePaste">然后是匹配 @Auditable 方法执行的通知：</div><br><pre lang="java">@Before(“com.xyz.lib.Pointcuts.anyPublicMethod() &amp;&amp;  @annotation(auditable)”)<br>public void audit(Auditable auditable) {<br>    AuditCode code = auditable.value();<br>    // …<br>}</pre><br><div><strong>3)、决定参数名</strong></div><br><div id="_mcePaste">绑定在通知上的参数依赖切入点表达式的匹配名，并借此在（通知（advice）和切入点（pointcut））的方法签名中声明参数名。 参数名 无法 通过Java反射来获取，所以Spring AOP使用如下的策略来决定参数名字：</div><br><div id="_mcePaste">如果参数名字已经被用户明确指定，则使用指定的参数名： 通知（advice）和切入点（pointcut）注解有一个额外的”argNames”属性，该属性用来指定所注解的方法的参数名 - 这些参数名在运行时是 可以 访问的。例子如下：</div><br><pre lang="java">@Before(value=”com.xyz.lib.Pointcuts.anyPublicMethod() &amp;&amp; @annotation(auditable)”, argNames=”auditable”)<br>public void audit(Auditable auditable) {<br>    AuditCode code = auditable.value();<br>    // …<br>}</pre><br><div id="_mcePaste">如果一个@AspectJ切面已经被AspectJ编译器（ajc）编译过了，那么就不需要再添加 argNames 参数了，因为编译器会自动完成这一工作。</div><br><div id="_mcePaste">使用 ‘argNames’ 属性有点不那么优雅，所以如果没有指定’argNames’ 属性， Spring AOP 会寻找类的debug信息，并且尝试从本地变量表（local variable table）中来决定参数名字。 只要编译的时候使用了debug信息（至少要使用 ‘-g:vars’ ），就可获得这些信息。 使用这个flag编译的结果是： (1)你的代码将能够更加容易的读懂（反向工程）</div><br><div>(2)生成的class文件会稍许大一些（不重要的）</div><br><div>(3)移除不被使用的本地变量的优化功能将会失效。 换句话说，你在使用这个flag的时候不会遇到任何困难。</div><br><div id="_mcePaste">如果不加上debug信息来编译的话，Spring AOP将会尝试推断参数的绑定。 （例如，要是只有一个变量被绑定到切入点表达式（pointcut expression）、通知方法（advice method）将会接受这个参数， 这是显而易见的）。 如果变量的绑定不明确，将会抛出一个 AmbiguousBindingException 异常。</div><br><div id="_mcePaste">如果以上所有策略都失败了，将会抛出一个 IllegalArgumentException 异常</div><br><div><strong>8、常用切入点表达式</strong></div><br><div><strong>

</strong></div><br><div id="_mcePaste">execution(modifiers-pattern? ret-type-pattern declaring-type-pattern? name-pattern(param-pattern) throws-pattern?)</div><br><div id="_mcePaste">除了返回类型模式（上面代码片断中的ret-type-pattern），名字模式和参数模式以外，所有的部分都是可选的。 返回类型模式决定了方法的返回类型必须依次匹配一个连接点。 你会使用的最频繁的返回类型模式是 <em>，它代表了匹配任意的返回类型。 一个全称限定的类型名将只会匹配返回给定类型的方法。名字模式匹配的是方法名。 你可以使用 </em> 通配符作为所有或者部分命名模式。 参数模式稍微有点复杂：() 匹配了一个不接受任何参数的方法， 而 (..) 匹配了一个接受任意数量参数的方法（零或者更多）。 模式 (<em>) 匹配了一个接受一个任何类型的参数的方法。 模式 (</em>,String) 匹配了一个接受两个参数的方法，第一个可以是任意类型，第二个则必须是String类型。</div><br><div id="_mcePaste">下面给出一些常见切入点表达式的例子。</div><br><div id="_mcePaste">任意公共方法的执行：</div><br><div id="_mcePaste">execution(public <em> </em>(..))</div><br><div id="_mcePaste">任何一个以“set”开始的方法的执行：</div><br><div id="_mcePaste">execution(<em> set</em>(..))</div><br><div id="_mcePaste">AccountService 接口的任意方法的执行：</div><br><div id="_mcePaste">execution(<em> com.xyz.service.AccountService.</em>(..))</div><br><div id="_mcePaste">定义在service包里的任意方法的执行：</div><br><div id="_mcePaste">execution(<em> com.xyz.service.</em>.<em>(..))</em></div><br><div id="_mcePaste">定义在service包或者子包里的任意方法的执行：</div><br><div id="_mcePaste">execution( com.xyz.service..<em>.</em>(..))</div><br><div id="_mcePaste">在service包里的任意连接点（在Spring AOP中只是方法执行） ：</div><br><div id="_mcePaste">within(com.xyz.service.<em>)</em></div><br><div id="_mcePaste">在service包或者子包里的任意连接点（在Spring AOP中只是方法执行） ：</div><br><div id="_mcePaste">within(com.xyz.service..)</div><br><div id="_mcePaste">实现了 AccountService 接口的代理对象的任意连接点（在Spring AOP中只是方法执行） ：</div><br><div id="_mcePaste">this(com.xyz.service.AccountService)</div><br><div id="_mcePaste">‘this’在binding form中用的更多：- 请常见以下讨论通知的章节中关于如何使得代理对象可以在通知体内访问到的部分。</div><br><div id="_mcePaste">实现了 AccountService 接口的目标对象的任意连接点（在Spring AOP中只是方法执行） ：</div><br><div id="_mcePaste">target(com.xyz.service.AccountService)</div><br><div>任何一个只接受一个参数，且在运行时传入的参数实现了 Serializable 接口的连接点 （在Spring AOP中只是方法执行）</div><br><div id="_mcePaste">args(java.io.Serializable)</div><br><div id="_mcePaste">请注意在例子中给出的切入点不同于 execution(<em> </em>(java.io.Serializable))： args只有在动态运行时候传入参数是可序列化的（Serializable）才匹配，而execution 在传入参数的签名声明的类型实现了 Serializable 接口时候匹配。</div><br><div id="_mcePaste">有一个 @Transactional 注解的目标对象中的任意连接点（在Spring AOP中只是方法执行）</div><br><div id="_mcePaste">@target(org.springframework.transaction.annotation.Transactional)</div><br><div id="_mcePaste">任何一个目标对象声明的类型有一个 @Transactional 注解的连接点（在Spring AOP中只是方法执行）</div><br><div id="_mcePaste">@within(org.springframework.transaction.annotation.Transactional)</div><br><div id="_mcePaste">任何一个执行的方法有一个 @Transactional annotation的连接点（在Spring AOP中只是方法执行）</div><br><div id="_mcePaste">@annotation(org.springframework.transaction.annotation.Transactional)</div><br><div id="_mcePaste">任何一个接受一个参数，并且传入的参数在运行时的类型实现了 @Classified annotation的连接点（在Spring AOP中只是方法执行）</div><br><div id="_mcePaste">@args(com.xyz.security.Classified)</div><br><div><strong>9、参考并抄袭自</strong></div>

<p><a href="http://static.springsource.org/spring/docs/2.5.x/reference/aop.html" target="_blank" rel="external">http://static.springsource.org/spring/docs/2.5.x/reference/aop.html</a></p>
<p><a href="http://hi.baidu.com/wangyongjin87/blog/item/c9cf2cec4e19de232df534cb.html" target="_blank" rel="external">http://hi.baidu.com/wangyongjin87/blog/item/c9cf2cec4e19de232df534cb.html</a></p>
]]></content:encoded>
      <comments>http://fyun.li/2010/05/23/spring-aop-annotation/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
